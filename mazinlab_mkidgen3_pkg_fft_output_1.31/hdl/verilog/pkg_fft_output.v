// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pkg_fft_output_pkg_fft_output,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=0.849000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=23,HLS_SYN_LUT=79,HLS_VERSION=2021_1}" *)

module pkg_fft_output (
// synthesis translate_off
    kernel_block,
// synthesis translate_on
        ap_clk,
        ap_rst_n,
        iq_0,
        iq_1,
        iq_2,
        iq_3,
        iq_4,
        iq_5,
        iq_6,
        iq_7,
        iq_8,
        iq_9,
        iq_10,
        iq_11,
        iq_12,
        iq_13,
        iq_14,
        iq_15,
        scale,
        scale_ap_vld,
        output_r_TDATA,
        output_r_TVALID,
        output_r_TREADY,
        output_r_TKEEP,
        output_r_TSTRB,
        output_r_TUSER,
        output_r_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

// synthesis translate_off
output kernel_block;
// synthesis translate_on
input   ap_clk;
input   ap_rst_n;
input  [31:0] iq_0;
input  [31:0] iq_1;
input  [31:0] iq_2;
input  [31:0] iq_3;
input  [31:0] iq_4;
input  [31:0] iq_5;
input  [31:0] iq_6;
input  [31:0] iq_7;
input  [31:0] iq_8;
input  [31:0] iq_9;
input  [31:0] iq_10;
input  [31:0] iq_11;
input  [31:0] iq_12;
input  [31:0] iq_13;
input  [31:0] iq_14;
input  [31:0] iq_15;
input  [11:0] scale;
input   scale_ap_vld;
output  [511:0] output_r_TDATA;
output   output_r_TVALID;
input   output_r_TREADY;
output  [63:0] output_r_TKEEP;
output  [63:0] output_r_TSTRB;
output  [15:0] output_r_TUSER;
output  [0:0] output_r_TLAST;

 reg    ap_rst_n_inv;
reg   [11:0] scale_preg;
reg   [11:0] scale_in_sig;
reg    scale_ap_vld_preg;
reg    scale_ap_vld_in_sig;
reg   [7:0] group_r;
reg    scale_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    output_r_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_state1_pp0_stage0_iter0;
wire    regslice_forward_output_V_data_V_U_apdone_blk;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_pp0_stage0_subdone;
wire   [7:0] add_ln870_fu_262_p2;
reg    ap_block_pp0_stage0_01001;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [511:0] output_r_TDATA_int_regslice;
reg    output_r_TVALID_int_regslice;
wire    output_r_TREADY_int_regslice;
wire    regslice_forward_output_V_data_V_U_vld_out;
wire    regslice_forward_output_V_keep_V_U_apdone_blk;
wire    regslice_forward_output_V_keep_V_U_ack_in_dummy;
wire    regslice_forward_output_V_keep_V_U_vld_out;
wire    regslice_forward_output_V_strb_V_U_apdone_blk;
wire    regslice_forward_output_V_strb_V_U_ack_in_dummy;
wire    regslice_forward_output_V_strb_V_U_vld_out;
wire    regslice_forward_output_V_user_V_U_apdone_blk;
wire   [15:0] output_r_TUSER_int_regslice;
wire    regslice_forward_output_V_user_V_U_ack_in_dummy;
wire    regslice_forward_output_V_user_V_U_vld_out;
wire    regslice_forward_output_V_last_V_U_apdone_blk;
wire   [0:0] output_r_TLAST_int_regslice;
wire    regslice_forward_output_V_last_V_U_ack_in_dummy;
wire    regslice_forward_output_V_last_V_U_vld_out;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 scale_preg = 12'd0;
#0 scale_ap_vld_preg = 1'b0;
#0 group_r = 8'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

pkg_fft_output_regslice_forward #(
    .DataWidth( 512 ))
regslice_forward_output_V_data_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TDATA_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(output_r_TREADY_int_regslice),
    .data_out(output_r_TDATA),
    .vld_out(regslice_forward_output_V_data_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_forward_output_V_data_V_U_apdone_blk)
);

pkg_fft_output_regslice_forward #(
    .DataWidth( 64 ))
regslice_forward_output_V_keep_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(64'd0),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_forward_output_V_keep_V_U_ack_in_dummy),
    .data_out(output_r_TKEEP),
    .vld_out(regslice_forward_output_V_keep_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_forward_output_V_keep_V_U_apdone_blk)
);

pkg_fft_output_regslice_forward #(
    .DataWidth( 64 ))
regslice_forward_output_V_strb_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(64'd0),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_forward_output_V_strb_V_U_ack_in_dummy),
    .data_out(output_r_TSTRB),
    .vld_out(regslice_forward_output_V_strb_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_forward_output_V_strb_V_U_apdone_blk)
);

pkg_fft_output_regslice_forward #(
    .DataWidth( 16 ))
regslice_forward_output_V_user_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TUSER_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_forward_output_V_user_V_U_ack_in_dummy),
    .data_out(output_r_TUSER),
    .vld_out(regslice_forward_output_V_user_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_forward_output_V_user_V_U_apdone_blk)
);

pkg_fft_output_regslice_forward #(
    .DataWidth( 1 ))
regslice_forward_output_V_last_V_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TLAST_int_regslice),
    .vld_in(output_r_TVALID_int_regslice),
    .ack_in(regslice_forward_output_V_last_V_U_ack_in_dummy),
    .data_out(output_r_TLAST),
    .vld_out(regslice_forward_output_V_last_V_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_forward_output_V_last_V_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        scale_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            scale_ap_vld_preg <= 1'b0;
        end else if ((scale_ap_vld == 1'b1)) begin
            scale_ap_vld_preg <= scale_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        scale_preg <= 12'd0;
    end else begin
        if ((scale_ap_vld == 1'b1)) begin
            scale_preg <= scale;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        group_r <= add_ln870_fu_262_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        output_r_TDATA_blk_n = output_r_TREADY_int_regslice;
    end else begin
        output_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_r_TVALID_int_regslice = 1'b1;
    end else begin
        output_r_TVALID_int_regslice = 1'b0;
    end
end

always @ (*) begin
    if ((scale_ap_vld == 1'b1)) begin
        scale_ap_vld_in_sig = scale_ap_vld;
    end else begin
        scale_ap_vld_in_sig = scale_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        scale_blk_n = scale_ap_vld;
    end else begin
        scale_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((scale_ap_vld == 1'b1)) begin
        scale_in_sig = scale;
    end else begin
        scale_in_sig = scale_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln870_fu_262_p2 = (group_r + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_forward_output_V_data_V_U_apdone_blk == 1'b1) | (output_r_TREADY_int_regslice == 1'b0))) | ((1'b1 == 1'b1) & ((scale_ap_vld_in_sig == 1'b0) | (output_r_TREADY_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_forward_output_V_data_V_U_apdone_blk == 1'b1) | (output_r_TREADY_int_regslice == 1'b0))) | ((1'b1 == 1'b1) & ((scale_ap_vld_in_sig == 1'b0) | (output_r_TREADY_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((regslice_forward_output_V_data_V_U_apdone_blk == 1'b1) | (output_r_TREADY_int_regslice == 1'b0))) | ((1'b1 == 1'b1) & ((scale_ap_vld_in_sig == 1'b0) | (output_r_TREADY_int_regslice == 1'b0))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((scale_ap_vld_in_sig == 1'b0) | (output_r_TREADY_int_regslice == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((regslice_forward_output_V_data_V_U_apdone_blk == 1'b1) | (output_r_TREADY_int_regslice == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign output_r_TDATA_int_regslice = {{{{{{{{{{{{{{{{iq_15}, {iq_14}}, {iq_13}}, {iq_12}}, {iq_11}}, {iq_10}}, {iq_9}}, {iq_8}}, {iq_7}}, {iq_6}}, {iq_5}}, {iq_4}}, {iq_3}}, {iq_2}}, {iq_1}}, {iq_0}};

assign output_r_TLAST_int_regslice = ((group_r == 8'd255) ? 1'b1 : 1'b0);

assign output_r_TUSER_int_regslice = scale_in_sig;

assign output_r_TVALID = regslice_forward_output_V_data_V_U_vld_out;


// synthesis translate_off
`include "pkg_fft_output_hls_deadlock_kernel_monitor_top.vh"
// synthesis translate_on

endmodule //pkg_fft_output

