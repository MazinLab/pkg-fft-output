-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pkg_fft_output is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    iq_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_8 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_9 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_10 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_11 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_12 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_13 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_14 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_15 : IN STD_LOGIC_VECTOR (31 downto 0);
    scale : IN STD_LOGIC_VECTOR (11 downto 0);
    scale_ap_vld : IN STD_LOGIC;
    output_r_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC;
    output_r_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_r_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_r_TUSER : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of pkg_fft_output is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pkg_fft_output_pkg_fft_output,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=0.849000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=23,HLS_SYN_LUT=79,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal scale_preg : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal scale_in_sig : STD_LOGIC_VECTOR (11 downto 0);
    signal scale_ap_vld_preg : STD_LOGIC := '0';
    signal scale_ap_vld_in_sig : STD_LOGIC;
    signal group_r : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal scale_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal output_r_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal regslice_forward_output_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal add_ln870_fu_262_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal output_r_TDATA_int_regslice : STD_LOGIC_VECTOR (511 downto 0);
    signal output_r_TVALID_int_regslice : STD_LOGIC;
    signal output_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_forward_output_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_forward_output_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_forward_output_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_forward_output_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_forward_output_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_forward_output_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_forward_output_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_forward_output_V_user_V_U_apdone_blk : STD_LOGIC;
    signal output_r_TUSER_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal regslice_forward_output_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_forward_output_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_forward_output_V_last_V_U_apdone_blk : STD_LOGIC;
    signal output_r_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_forward_output_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_forward_output_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component pkg_fft_output_regslice_forward IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_forward_output_V_data_V_U : component pkg_fft_output_regslice_forward
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TDATA_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => output_r_TREADY_int_regslice,
        data_out => output_r_TDATA,
        vld_out => regslice_forward_output_V_data_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_forward_output_V_data_V_U_apdone_blk);

    regslice_forward_output_V_keep_V_U : component pkg_fft_output_regslice_forward
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv64_0,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_forward_output_V_keep_V_U_ack_in_dummy,
        data_out => output_r_TKEEP,
        vld_out => regslice_forward_output_V_keep_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_forward_output_V_keep_V_U_apdone_blk);

    regslice_forward_output_V_strb_V_U : component pkg_fft_output_regslice_forward
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv64_0,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_forward_output_V_strb_V_U_ack_in_dummy,
        data_out => output_r_TSTRB,
        vld_out => regslice_forward_output_V_strb_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_forward_output_V_strb_V_U_apdone_blk);

    regslice_forward_output_V_user_V_U : component pkg_fft_output_regslice_forward
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TUSER_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_forward_output_V_user_V_U_ack_in_dummy,
        data_out => output_r_TUSER,
        vld_out => regslice_forward_output_V_user_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_forward_output_V_user_V_U_apdone_blk);

    regslice_forward_output_V_last_V_U : component pkg_fft_output_regslice_forward
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TLAST_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_forward_output_V_last_V_U_ack_in_dummy,
        data_out => output_r_TLAST,
        vld_out => regslice_forward_output_V_last_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_forward_output_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    scale_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                scale_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    scale_ap_vld_preg <= ap_const_logic_0;
                elsif ((scale_ap_vld = ap_const_logic_1)) then 
                    scale_ap_vld_preg <= scale_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    scale_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                scale_preg <= ap_const_lv12_0;
            else
                if ((scale_ap_vld = ap_const_logic_1)) then 
                    scale_preg <= scale;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                group_r <= add_ln870_fu_262_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln870_fu_262_p2 <= std_logic_vector(unsigned(group_r) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(scale_ap_vld_in_sig, ap_enable_reg_pp0_iter1, regslice_forward_output_V_data_V_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((regslice_forward_output_V_data_V_U_apdone_blk = ap_const_logic_1) or (output_r_TREADY_int_regslice = ap_const_logic_0))) or ((ap_const_logic_1 = ap_const_logic_1) and ((scale_ap_vld_in_sig = ap_const_logic_0) or (output_r_TREADY_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(scale_ap_vld_in_sig, ap_enable_reg_pp0_iter1, regslice_forward_output_V_data_V_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((regslice_forward_output_V_data_V_U_apdone_blk = ap_const_logic_1) or (output_r_TREADY_int_regslice = ap_const_logic_0))) or ((ap_const_logic_1 = ap_const_logic_1) and ((scale_ap_vld_in_sig = ap_const_logic_0) or (output_r_TREADY_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(scale_ap_vld_in_sig, ap_enable_reg_pp0_iter1, regslice_forward_output_V_data_V_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((regslice_forward_output_V_data_V_U_apdone_blk = ap_const_logic_1) or (output_r_TREADY_int_regslice = ap_const_logic_0))) or ((ap_const_logic_1 = ap_const_logic_1) and ((scale_ap_vld_in_sig = ap_const_logic_0) or (output_r_TREADY_int_regslice = ap_const_logic_0))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(scale_ap_vld_in_sig, output_r_TREADY_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((scale_ap_vld_in_sig = ap_const_logic_0) or (output_r_TREADY_int_regslice = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(regslice_forward_output_V_data_V_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((regslice_forward_output_V_data_V_U_apdone_blk = ap_const_logic_1) or (output_r_TREADY_int_regslice = ap_const_logic_0));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    output_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, output_r_TREADY_int_regslice)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            output_r_TDATA_blk_n <= output_r_TREADY_int_regslice;
        else 
            output_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_r_TDATA_int_regslice <= (((((((((((((((iq_15 & iq_14) & iq_13) & iq_12) & iq_11) & iq_10) & iq_9) & iq_8) & iq_7) & iq_6) & iq_5) & iq_4) & iq_3) & iq_2) & iq_1) & iq_0);
    output_r_TLAST_int_regslice <= "1" when (group_r = ap_const_lv8_FF) else "0";
    output_r_TUSER_int_regslice <= std_logic_vector(IEEE.numeric_std.resize(unsigned(scale_in_sig),16));
    output_r_TVALID <= regslice_forward_output_V_data_V_U_vld_out;

    output_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            output_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;


    scale_ap_vld_in_sig_assign_proc : process(scale_ap_vld, scale_ap_vld_preg)
    begin
        if ((scale_ap_vld = ap_const_logic_1)) then 
            scale_ap_vld_in_sig <= scale_ap_vld;
        else 
            scale_ap_vld_in_sig <= scale_ap_vld_preg;
        end if; 
    end process;


    scale_blk_n_assign_proc : process(scale_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            scale_blk_n <= scale_ap_vld;
        else 
            scale_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    scale_in_sig_assign_proc : process(scale, scale_preg, scale_ap_vld)
    begin
        if ((scale_ap_vld = ap_const_logic_1)) then 
            scale_in_sig <= scale;
        else 
            scale_in_sig <= scale_preg;
        end if; 
    end process;

end behav;
