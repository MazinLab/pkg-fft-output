-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2.1
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pkg_fft_output is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    iq_0 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_0_ap_vld : IN STD_LOGIC;
    iq_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_1_ap_vld : IN STD_LOGIC;
    iq_2 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_2_ap_vld : IN STD_LOGIC;
    iq_3 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_3_ap_vld : IN STD_LOGIC;
    iq_4 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_4_ap_vld : IN STD_LOGIC;
    iq_5 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_5_ap_vld : IN STD_LOGIC;
    iq_6 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_6_ap_vld : IN STD_LOGIC;
    iq_7 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_7_ap_vld : IN STD_LOGIC;
    iq_8 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_8_ap_vld : IN STD_LOGIC;
    iq_9 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_9_ap_vld : IN STD_LOGIC;
    iq_10 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_10_ap_vld : IN STD_LOGIC;
    iq_11 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_11_ap_vld : IN STD_LOGIC;
    iq_12 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_12_ap_vld : IN STD_LOGIC;
    iq_13 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_13_ap_vld : IN STD_LOGIC;
    iq_14 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_14_ap_vld : IN STD_LOGIC;
    iq_15 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq_15_ap_vld : IN STD_LOGIC;
    scale_V : IN STD_LOGIC_VECTOR (11 downto 0);
    scale_V_ap_vld : IN STD_LOGIC;
    output_r_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC;
    output_r_TUSER : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_TLAST : OUT STD_LOGIC );
end;


architecture behav of pkg_fft_output is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pkg_fft_output,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=0.849000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=551,HLS_SYN_LUT=655,HLS_VERSION=2019_2_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal iq_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq_0_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq_0_ap_vld_preg : STD_LOGIC := '0';
    signal iq_0_ap_vld_in_sig : STD_LOGIC;
    signal iq_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq_1_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq_1_ap_vld_preg : STD_LOGIC := '0';
    signal iq_1_ap_vld_in_sig : STD_LOGIC;
    signal iq_2_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq_2_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq_2_ap_vld_preg : STD_LOGIC := '0';
    signal iq_2_ap_vld_in_sig : STD_LOGIC;
    signal iq_3_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq_3_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq_3_ap_vld_preg : STD_LOGIC := '0';
    signal iq_3_ap_vld_in_sig : STD_LOGIC;
    signal iq_4_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq_4_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq_4_ap_vld_preg : STD_LOGIC := '0';
    signal iq_4_ap_vld_in_sig : STD_LOGIC;
    signal iq_5_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq_5_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq_5_ap_vld_preg : STD_LOGIC := '0';
    signal iq_5_ap_vld_in_sig : STD_LOGIC;
    signal iq_6_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq_6_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq_6_ap_vld_preg : STD_LOGIC := '0';
    signal iq_6_ap_vld_in_sig : STD_LOGIC;
    signal iq_7_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq_7_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq_7_ap_vld_preg : STD_LOGIC := '0';
    signal iq_7_ap_vld_in_sig : STD_LOGIC;
    signal iq_8_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq_8_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq_8_ap_vld_preg : STD_LOGIC := '0';
    signal iq_8_ap_vld_in_sig : STD_LOGIC;
    signal iq_9_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq_9_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq_9_ap_vld_preg : STD_LOGIC := '0';
    signal iq_9_ap_vld_in_sig : STD_LOGIC;
    signal iq_10_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq_10_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq_10_ap_vld_preg : STD_LOGIC := '0';
    signal iq_10_ap_vld_in_sig : STD_LOGIC;
    signal iq_11_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq_11_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq_11_ap_vld_preg : STD_LOGIC := '0';
    signal iq_11_ap_vld_in_sig : STD_LOGIC;
    signal iq_12_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq_12_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq_12_ap_vld_preg : STD_LOGIC := '0';
    signal iq_12_ap_vld_in_sig : STD_LOGIC;
    signal iq_13_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq_13_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq_13_ap_vld_preg : STD_LOGIC := '0';
    signal iq_13_ap_vld_in_sig : STD_LOGIC;
    signal iq_14_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq_14_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq_14_ap_vld_preg : STD_LOGIC := '0';
    signal iq_14_ap_vld_in_sig : STD_LOGIC;
    signal iq_15_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq_15_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq_15_ap_vld_preg : STD_LOGIC := '0';
    signal iq_15_ap_vld_in_sig : STD_LOGIC;
    signal scale_V_preg : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal scale_V_in_sig : STD_LOGIC_VECTOR (11 downto 0);
    signal scale_V_ap_vld_preg : STD_LOGIC := '0';
    signal scale_V_ap_vld_in_sig : STD_LOGIC;
    signal group_r : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal iq_0_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal iq_1_blk_n : STD_LOGIC;
    signal iq_2_blk_n : STD_LOGIC;
    signal iq_3_blk_n : STD_LOGIC;
    signal iq_4_blk_n : STD_LOGIC;
    signal iq_5_blk_n : STD_LOGIC;
    signal iq_6_blk_n : STD_LOGIC;
    signal iq_7_blk_n : STD_LOGIC;
    signal iq_8_blk_n : STD_LOGIC;
    signal iq_9_blk_n : STD_LOGIC;
    signal iq_10_blk_n : STD_LOGIC;
    signal iq_11_blk_n : STD_LOGIC;
    signal iq_12_blk_n : STD_LOGIC;
    signal iq_13_blk_n : STD_LOGIC;
    signal iq_14_blk_n : STD_LOGIC;
    signal iq_15_blk_n : STD_LOGIC;
    signal scale_V_blk_n : STD_LOGIC;
    signal output_r_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal regslice_forward_output_data_U_apdone_blk : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal add_ln18_fu_246_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal output_r_TDATA_int : STD_LOGIC_VECTOR (511 downto 0);
    signal output_r_TVALID_int : STD_LOGIC;
    signal output_r_TREADY_int : STD_LOGIC;
    signal regslice_forward_output_data_U_vld_out : STD_LOGIC;
    signal regslice_forward_output_user_U_apdone_blk : STD_LOGIC;
    signal output_r_TUSER_int : STD_LOGIC_VECTOR (31 downto 0);
    signal regslice_forward_output_user_U_ack_in_dummy : STD_LOGIC;
    signal regslice_forward_output_user_U_vld_out : STD_LOGIC;
    signal regslice_forward_w1_output_last_U_apdone_blk : STD_LOGIC;
    signal output_r_TLAST_int : STD_LOGIC;
    signal regslice_forward_w1_output_last_U_ack_in_dummy : STD_LOGIC;
    signal regslice_forward_w1_output_last_U_vld_out : STD_LOGIC;

    component regslice_forward IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;


    component regslice_forward_w1 IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC;
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC;
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_forward_output_data_U : component regslice_forward
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TDATA_int,
        vld_in => output_r_TVALID_int,
        ack_in => output_r_TREADY_int,
        data_out => output_r_TDATA,
        vld_out => regslice_forward_output_data_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_forward_output_data_U_apdone_blk);

    regslice_forward_output_user_U : component regslice_forward
    generic map (
        DataWidth => 32)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TUSER_int,
        vld_in => output_r_TVALID_int,
        ack_in => regslice_forward_output_user_U_ack_in_dummy,
        data_out => output_r_TUSER,
        vld_out => regslice_forward_output_user_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_forward_output_user_U_apdone_blk);

    regslice_forward_w1_output_last_U : component regslice_forward_w1
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TLAST_int,
        vld_in => output_r_TVALID_int,
        ack_in => regslice_forward_w1_output_last_U_ack_in_dummy,
        data_out => output_r_TLAST,
        vld_out => regslice_forward_w1_output_last_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_forward_w1_output_last_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    iq_0_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_0_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    iq_0_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq_0_ap_vld = ap_const_logic_1)) then 
                    iq_0_ap_vld_preg <= iq_0_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_0_preg <= ap_const_lv32_0;
            else
                if ((iq_0_ap_vld = ap_const_logic_1)) then 
                    iq_0_preg <= iq_0;
                end if; 
            end if;
        end if;
    end process;


    iq_10_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_10_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    iq_10_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq_10_ap_vld = ap_const_logic_1)) then 
                    iq_10_ap_vld_preg <= iq_10_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq_10_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_10_preg <= ap_const_lv32_0;
            else
                if ((iq_10_ap_vld = ap_const_logic_1)) then 
                    iq_10_preg <= iq_10;
                end if; 
            end if;
        end if;
    end process;


    iq_11_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_11_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    iq_11_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq_11_ap_vld = ap_const_logic_1)) then 
                    iq_11_ap_vld_preg <= iq_11_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq_11_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_11_preg <= ap_const_lv32_0;
            else
                if ((iq_11_ap_vld = ap_const_logic_1)) then 
                    iq_11_preg <= iq_11;
                end if; 
            end if;
        end if;
    end process;


    iq_12_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_12_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    iq_12_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq_12_ap_vld = ap_const_logic_1)) then 
                    iq_12_ap_vld_preg <= iq_12_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq_12_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_12_preg <= ap_const_lv32_0;
            else
                if ((iq_12_ap_vld = ap_const_logic_1)) then 
                    iq_12_preg <= iq_12;
                end if; 
            end if;
        end if;
    end process;


    iq_13_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_13_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    iq_13_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq_13_ap_vld = ap_const_logic_1)) then 
                    iq_13_ap_vld_preg <= iq_13_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq_13_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_13_preg <= ap_const_lv32_0;
            else
                if ((iq_13_ap_vld = ap_const_logic_1)) then 
                    iq_13_preg <= iq_13;
                end if; 
            end if;
        end if;
    end process;


    iq_14_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_14_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    iq_14_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq_14_ap_vld = ap_const_logic_1)) then 
                    iq_14_ap_vld_preg <= iq_14_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq_14_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_14_preg <= ap_const_lv32_0;
            else
                if ((iq_14_ap_vld = ap_const_logic_1)) then 
                    iq_14_preg <= iq_14;
                end if; 
            end if;
        end if;
    end process;


    iq_15_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_15_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    iq_15_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq_15_ap_vld = ap_const_logic_1)) then 
                    iq_15_ap_vld_preg <= iq_15_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq_15_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_15_preg <= ap_const_lv32_0;
            else
                if ((iq_15_ap_vld = ap_const_logic_1)) then 
                    iq_15_preg <= iq_15;
                end if; 
            end if;
        end if;
    end process;


    iq_1_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_1_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    iq_1_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq_1_ap_vld = ap_const_logic_1)) then 
                    iq_1_ap_vld_preg <= iq_1_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_1_preg <= ap_const_lv32_0;
            else
                if ((iq_1_ap_vld = ap_const_logic_1)) then 
                    iq_1_preg <= iq_1;
                end if; 
            end if;
        end if;
    end process;


    iq_2_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_2_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    iq_2_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq_2_ap_vld = ap_const_logic_1)) then 
                    iq_2_ap_vld_preg <= iq_2_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq_2_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_2_preg <= ap_const_lv32_0;
            else
                if ((iq_2_ap_vld = ap_const_logic_1)) then 
                    iq_2_preg <= iq_2;
                end if; 
            end if;
        end if;
    end process;


    iq_3_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_3_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    iq_3_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq_3_ap_vld = ap_const_logic_1)) then 
                    iq_3_ap_vld_preg <= iq_3_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq_3_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_3_preg <= ap_const_lv32_0;
            else
                if ((iq_3_ap_vld = ap_const_logic_1)) then 
                    iq_3_preg <= iq_3;
                end if; 
            end if;
        end if;
    end process;


    iq_4_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_4_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    iq_4_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq_4_ap_vld = ap_const_logic_1)) then 
                    iq_4_ap_vld_preg <= iq_4_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq_4_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_4_preg <= ap_const_lv32_0;
            else
                if ((iq_4_ap_vld = ap_const_logic_1)) then 
                    iq_4_preg <= iq_4;
                end if; 
            end if;
        end if;
    end process;


    iq_5_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_5_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    iq_5_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq_5_ap_vld = ap_const_logic_1)) then 
                    iq_5_ap_vld_preg <= iq_5_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq_5_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_5_preg <= ap_const_lv32_0;
            else
                if ((iq_5_ap_vld = ap_const_logic_1)) then 
                    iq_5_preg <= iq_5;
                end if; 
            end if;
        end if;
    end process;


    iq_6_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_6_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    iq_6_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq_6_ap_vld = ap_const_logic_1)) then 
                    iq_6_ap_vld_preg <= iq_6_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq_6_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_6_preg <= ap_const_lv32_0;
            else
                if ((iq_6_ap_vld = ap_const_logic_1)) then 
                    iq_6_preg <= iq_6;
                end if; 
            end if;
        end if;
    end process;


    iq_7_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_7_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    iq_7_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq_7_ap_vld = ap_const_logic_1)) then 
                    iq_7_ap_vld_preg <= iq_7_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq_7_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_7_preg <= ap_const_lv32_0;
            else
                if ((iq_7_ap_vld = ap_const_logic_1)) then 
                    iq_7_preg <= iq_7;
                end if; 
            end if;
        end if;
    end process;


    iq_8_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_8_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    iq_8_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq_8_ap_vld = ap_const_logic_1)) then 
                    iq_8_ap_vld_preg <= iq_8_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq_8_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_8_preg <= ap_const_lv32_0;
            else
                if ((iq_8_ap_vld = ap_const_logic_1)) then 
                    iq_8_preg <= iq_8;
                end if; 
            end if;
        end if;
    end process;


    iq_9_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_9_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    iq_9_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq_9_ap_vld = ap_const_logic_1)) then 
                    iq_9_ap_vld_preg <= iq_9_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq_9_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq_9_preg <= ap_const_lv32_0;
            else
                if ((iq_9_ap_vld = ap_const_logic_1)) then 
                    iq_9_preg <= iq_9;
                end if; 
            end if;
        end if;
    end process;


    scale_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                scale_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    scale_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((scale_V_ap_vld = ap_const_logic_1)) then 
                    scale_V_ap_vld_preg <= scale_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    scale_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                scale_V_preg <= ap_const_lv12_0;
            else
                if ((scale_V_ap_vld = ap_const_logic_1)) then 
                    scale_V_preg <= scale_V;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                group_r <= add_ln18_fu_246_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln18_fu_246_p2 <= std_logic_vector(unsigned(group_r) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(iq_0_ap_vld_in_sig, iq_1_ap_vld_in_sig, iq_2_ap_vld_in_sig, iq_3_ap_vld_in_sig, iq_4_ap_vld_in_sig, iq_5_ap_vld_in_sig, iq_6_ap_vld_in_sig, iq_7_ap_vld_in_sig, iq_8_ap_vld_in_sig, iq_9_ap_vld_in_sig, iq_10_ap_vld_in_sig, iq_11_ap_vld_in_sig, iq_12_ap_vld_in_sig, iq_13_ap_vld_in_sig, iq_14_ap_vld_in_sig, iq_15_ap_vld_in_sig, scale_V_ap_vld_in_sig, ap_enable_reg_pp0_iter1, regslice_forward_output_data_U_apdone_blk)
    begin
                ap_block_pp0_stage0_01001 <= (((regslice_forward_output_data_U_apdone_blk = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_const_logic_1 = ap_const_logic_1) and ((iq_11_ap_vld_in_sig = ap_const_logic_0) or (iq_10_ap_vld_in_sig = ap_const_logic_0) or (iq_9_ap_vld_in_sig = ap_const_logic_0) or (iq_8_ap_vld_in_sig = ap_const_logic_0) or (iq_7_ap_vld_in_sig = ap_const_logic_0) or (iq_6_ap_vld_in_sig = ap_const_logic_0) or (iq_5_ap_vld_in_sig = ap_const_logic_0) or (iq_4_ap_vld_in_sig = ap_const_logic_0) or (iq_3_ap_vld_in_sig = ap_const_logic_0) or (iq_2_ap_vld_in_sig = ap_const_logic_0) or (iq_1_ap_vld_in_sig = ap_const_logic_0) or (iq_0_ap_vld_in_sig = ap_const_logic_0) or (scale_V_ap_vld_in_sig = ap_const_logic_0) or (iq_15_ap_vld_in_sig = ap_const_logic_0) or (iq_14_ap_vld_in_sig = ap_const_logic_0) or (iq_13_ap_vld_in_sig = ap_const_logic_0) or (iq_12_ap_vld_in_sig = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(iq_0_ap_vld_in_sig, iq_1_ap_vld_in_sig, iq_2_ap_vld_in_sig, iq_3_ap_vld_in_sig, iq_4_ap_vld_in_sig, iq_5_ap_vld_in_sig, iq_6_ap_vld_in_sig, iq_7_ap_vld_in_sig, iq_8_ap_vld_in_sig, iq_9_ap_vld_in_sig, iq_10_ap_vld_in_sig, iq_11_ap_vld_in_sig, iq_12_ap_vld_in_sig, iq_13_ap_vld_in_sig, iq_14_ap_vld_in_sig, iq_15_ap_vld_in_sig, scale_V_ap_vld_in_sig, ap_enable_reg_pp0_iter1, regslice_forward_output_data_U_apdone_blk, output_r_TREADY_int)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((output_r_TREADY_int = ap_const_logic_0) or (regslice_forward_output_data_U_apdone_blk = ap_const_logic_1))) or ((ap_const_logic_1 = ap_const_logic_1) and ((iq_11_ap_vld_in_sig = ap_const_logic_0) or (iq_10_ap_vld_in_sig = ap_const_logic_0) or (iq_9_ap_vld_in_sig = ap_const_logic_0) or (iq_8_ap_vld_in_sig = ap_const_logic_0) or (iq_7_ap_vld_in_sig = ap_const_logic_0) or (iq_6_ap_vld_in_sig = ap_const_logic_0) or (iq_5_ap_vld_in_sig = ap_const_logic_0) or (iq_4_ap_vld_in_sig = ap_const_logic_0) or (iq_3_ap_vld_in_sig = ap_const_logic_0) or (output_r_TREADY_int = ap_const_logic_0) or (iq_2_ap_vld_in_sig = ap_const_logic_0) or (iq_1_ap_vld_in_sig = ap_const_logic_0) or (iq_0_ap_vld_in_sig = ap_const_logic_0) or (scale_V_ap_vld_in_sig = ap_const_logic_0) or (iq_15_ap_vld_in_sig = ap_const_logic_0) or (iq_14_ap_vld_in_sig = ap_const_logic_0) or (iq_13_ap_vld_in_sig = ap_const_logic_0) or (iq_12_ap_vld_in_sig = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(iq_0_ap_vld_in_sig, iq_1_ap_vld_in_sig, iq_2_ap_vld_in_sig, iq_3_ap_vld_in_sig, iq_4_ap_vld_in_sig, iq_5_ap_vld_in_sig, iq_6_ap_vld_in_sig, iq_7_ap_vld_in_sig, iq_8_ap_vld_in_sig, iq_9_ap_vld_in_sig, iq_10_ap_vld_in_sig, iq_11_ap_vld_in_sig, iq_12_ap_vld_in_sig, iq_13_ap_vld_in_sig, iq_14_ap_vld_in_sig, iq_15_ap_vld_in_sig, scale_V_ap_vld_in_sig, ap_enable_reg_pp0_iter1, regslice_forward_output_data_U_apdone_blk, output_r_TREADY_int)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((output_r_TREADY_int = ap_const_logic_0) or (regslice_forward_output_data_U_apdone_blk = ap_const_logic_1))) or ((ap_const_logic_1 = ap_const_logic_1) and ((iq_11_ap_vld_in_sig = ap_const_logic_0) or (iq_10_ap_vld_in_sig = ap_const_logic_0) or (iq_9_ap_vld_in_sig = ap_const_logic_0) or (iq_8_ap_vld_in_sig = ap_const_logic_0) or (iq_7_ap_vld_in_sig = ap_const_logic_0) or (iq_6_ap_vld_in_sig = ap_const_logic_0) or (iq_5_ap_vld_in_sig = ap_const_logic_0) or (iq_4_ap_vld_in_sig = ap_const_logic_0) or (iq_3_ap_vld_in_sig = ap_const_logic_0) or (output_r_TREADY_int = ap_const_logic_0) or (iq_2_ap_vld_in_sig = ap_const_logic_0) or (iq_1_ap_vld_in_sig = ap_const_logic_0) or (iq_0_ap_vld_in_sig = ap_const_logic_0) or (scale_V_ap_vld_in_sig = ap_const_logic_0) or (iq_15_ap_vld_in_sig = ap_const_logic_0) or (iq_14_ap_vld_in_sig = ap_const_logic_0) or (iq_13_ap_vld_in_sig = ap_const_logic_0) or (iq_12_ap_vld_in_sig = ap_const_logic_0))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(iq_0_ap_vld_in_sig, iq_1_ap_vld_in_sig, iq_2_ap_vld_in_sig, iq_3_ap_vld_in_sig, iq_4_ap_vld_in_sig, iq_5_ap_vld_in_sig, iq_6_ap_vld_in_sig, iq_7_ap_vld_in_sig, iq_8_ap_vld_in_sig, iq_9_ap_vld_in_sig, iq_10_ap_vld_in_sig, iq_11_ap_vld_in_sig, iq_12_ap_vld_in_sig, iq_13_ap_vld_in_sig, iq_14_ap_vld_in_sig, iq_15_ap_vld_in_sig, scale_V_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((iq_11_ap_vld_in_sig = ap_const_logic_0) or (iq_10_ap_vld_in_sig = ap_const_logic_0) or (iq_9_ap_vld_in_sig = ap_const_logic_0) or (iq_8_ap_vld_in_sig = ap_const_logic_0) or (iq_7_ap_vld_in_sig = ap_const_logic_0) or (iq_6_ap_vld_in_sig = ap_const_logic_0) or (iq_5_ap_vld_in_sig = ap_const_logic_0) or (iq_4_ap_vld_in_sig = ap_const_logic_0) or (iq_3_ap_vld_in_sig = ap_const_logic_0) or (iq_2_ap_vld_in_sig = ap_const_logic_0) or (iq_1_ap_vld_in_sig = ap_const_logic_0) or (iq_0_ap_vld_in_sig = ap_const_logic_0) or (scale_V_ap_vld_in_sig = ap_const_logic_0) or (iq_15_ap_vld_in_sig = ap_const_logic_0) or (iq_14_ap_vld_in_sig = ap_const_logic_0) or (iq_13_ap_vld_in_sig = ap_const_logic_0) or (iq_12_ap_vld_in_sig = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(regslice_forward_output_data_U_apdone_blk)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (regslice_forward_output_data_U_apdone_blk = ap_const_logic_1);
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    iq_0_ap_vld_in_sig_assign_proc : process(iq_0_ap_vld, iq_0_ap_vld_preg)
    begin
        if ((iq_0_ap_vld = ap_const_logic_1)) then 
            iq_0_ap_vld_in_sig <= iq_0_ap_vld;
        else 
            iq_0_ap_vld_in_sig <= iq_0_ap_vld_preg;
        end if; 
    end process;


    iq_0_blk_n_assign_proc : process(iq_0_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_0_blk_n <= iq_0_ap_vld;
        else 
            iq_0_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq_0_in_sig_assign_proc : process(iq_0, iq_0_preg, iq_0_ap_vld)
    begin
        if ((iq_0_ap_vld = ap_const_logic_1)) then 
            iq_0_in_sig <= iq_0;
        else 
            iq_0_in_sig <= iq_0_preg;
        end if; 
    end process;


    iq_10_ap_vld_in_sig_assign_proc : process(iq_10_ap_vld, iq_10_ap_vld_preg)
    begin
        if ((iq_10_ap_vld = ap_const_logic_1)) then 
            iq_10_ap_vld_in_sig <= iq_10_ap_vld;
        else 
            iq_10_ap_vld_in_sig <= iq_10_ap_vld_preg;
        end if; 
    end process;


    iq_10_blk_n_assign_proc : process(iq_10_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_10_blk_n <= iq_10_ap_vld;
        else 
            iq_10_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq_10_in_sig_assign_proc : process(iq_10, iq_10_preg, iq_10_ap_vld)
    begin
        if ((iq_10_ap_vld = ap_const_logic_1)) then 
            iq_10_in_sig <= iq_10;
        else 
            iq_10_in_sig <= iq_10_preg;
        end if; 
    end process;


    iq_11_ap_vld_in_sig_assign_proc : process(iq_11_ap_vld, iq_11_ap_vld_preg)
    begin
        if ((iq_11_ap_vld = ap_const_logic_1)) then 
            iq_11_ap_vld_in_sig <= iq_11_ap_vld;
        else 
            iq_11_ap_vld_in_sig <= iq_11_ap_vld_preg;
        end if; 
    end process;


    iq_11_blk_n_assign_proc : process(iq_11_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_11_blk_n <= iq_11_ap_vld;
        else 
            iq_11_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq_11_in_sig_assign_proc : process(iq_11, iq_11_preg, iq_11_ap_vld)
    begin
        if ((iq_11_ap_vld = ap_const_logic_1)) then 
            iq_11_in_sig <= iq_11;
        else 
            iq_11_in_sig <= iq_11_preg;
        end if; 
    end process;


    iq_12_ap_vld_in_sig_assign_proc : process(iq_12_ap_vld, iq_12_ap_vld_preg)
    begin
        if ((iq_12_ap_vld = ap_const_logic_1)) then 
            iq_12_ap_vld_in_sig <= iq_12_ap_vld;
        else 
            iq_12_ap_vld_in_sig <= iq_12_ap_vld_preg;
        end if; 
    end process;


    iq_12_blk_n_assign_proc : process(iq_12_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_12_blk_n <= iq_12_ap_vld;
        else 
            iq_12_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq_12_in_sig_assign_proc : process(iq_12, iq_12_preg, iq_12_ap_vld)
    begin
        if ((iq_12_ap_vld = ap_const_logic_1)) then 
            iq_12_in_sig <= iq_12;
        else 
            iq_12_in_sig <= iq_12_preg;
        end if; 
    end process;


    iq_13_ap_vld_in_sig_assign_proc : process(iq_13_ap_vld, iq_13_ap_vld_preg)
    begin
        if ((iq_13_ap_vld = ap_const_logic_1)) then 
            iq_13_ap_vld_in_sig <= iq_13_ap_vld;
        else 
            iq_13_ap_vld_in_sig <= iq_13_ap_vld_preg;
        end if; 
    end process;


    iq_13_blk_n_assign_proc : process(iq_13_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_13_blk_n <= iq_13_ap_vld;
        else 
            iq_13_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq_13_in_sig_assign_proc : process(iq_13, iq_13_preg, iq_13_ap_vld)
    begin
        if ((iq_13_ap_vld = ap_const_logic_1)) then 
            iq_13_in_sig <= iq_13;
        else 
            iq_13_in_sig <= iq_13_preg;
        end if; 
    end process;


    iq_14_ap_vld_in_sig_assign_proc : process(iq_14_ap_vld, iq_14_ap_vld_preg)
    begin
        if ((iq_14_ap_vld = ap_const_logic_1)) then 
            iq_14_ap_vld_in_sig <= iq_14_ap_vld;
        else 
            iq_14_ap_vld_in_sig <= iq_14_ap_vld_preg;
        end if; 
    end process;


    iq_14_blk_n_assign_proc : process(iq_14_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_14_blk_n <= iq_14_ap_vld;
        else 
            iq_14_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq_14_in_sig_assign_proc : process(iq_14, iq_14_preg, iq_14_ap_vld)
    begin
        if ((iq_14_ap_vld = ap_const_logic_1)) then 
            iq_14_in_sig <= iq_14;
        else 
            iq_14_in_sig <= iq_14_preg;
        end if; 
    end process;


    iq_15_ap_vld_in_sig_assign_proc : process(iq_15_ap_vld, iq_15_ap_vld_preg)
    begin
        if ((iq_15_ap_vld = ap_const_logic_1)) then 
            iq_15_ap_vld_in_sig <= iq_15_ap_vld;
        else 
            iq_15_ap_vld_in_sig <= iq_15_ap_vld_preg;
        end if; 
    end process;


    iq_15_blk_n_assign_proc : process(iq_15_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_15_blk_n <= iq_15_ap_vld;
        else 
            iq_15_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq_15_in_sig_assign_proc : process(iq_15, iq_15_preg, iq_15_ap_vld)
    begin
        if ((iq_15_ap_vld = ap_const_logic_1)) then 
            iq_15_in_sig <= iq_15;
        else 
            iq_15_in_sig <= iq_15_preg;
        end if; 
    end process;


    iq_1_ap_vld_in_sig_assign_proc : process(iq_1_ap_vld, iq_1_ap_vld_preg)
    begin
        if ((iq_1_ap_vld = ap_const_logic_1)) then 
            iq_1_ap_vld_in_sig <= iq_1_ap_vld;
        else 
            iq_1_ap_vld_in_sig <= iq_1_ap_vld_preg;
        end if; 
    end process;


    iq_1_blk_n_assign_proc : process(iq_1_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_1_blk_n <= iq_1_ap_vld;
        else 
            iq_1_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq_1_in_sig_assign_proc : process(iq_1, iq_1_preg, iq_1_ap_vld)
    begin
        if ((iq_1_ap_vld = ap_const_logic_1)) then 
            iq_1_in_sig <= iq_1;
        else 
            iq_1_in_sig <= iq_1_preg;
        end if; 
    end process;


    iq_2_ap_vld_in_sig_assign_proc : process(iq_2_ap_vld, iq_2_ap_vld_preg)
    begin
        if ((iq_2_ap_vld = ap_const_logic_1)) then 
            iq_2_ap_vld_in_sig <= iq_2_ap_vld;
        else 
            iq_2_ap_vld_in_sig <= iq_2_ap_vld_preg;
        end if; 
    end process;


    iq_2_blk_n_assign_proc : process(iq_2_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_2_blk_n <= iq_2_ap_vld;
        else 
            iq_2_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq_2_in_sig_assign_proc : process(iq_2, iq_2_preg, iq_2_ap_vld)
    begin
        if ((iq_2_ap_vld = ap_const_logic_1)) then 
            iq_2_in_sig <= iq_2;
        else 
            iq_2_in_sig <= iq_2_preg;
        end if; 
    end process;


    iq_3_ap_vld_in_sig_assign_proc : process(iq_3_ap_vld, iq_3_ap_vld_preg)
    begin
        if ((iq_3_ap_vld = ap_const_logic_1)) then 
            iq_3_ap_vld_in_sig <= iq_3_ap_vld;
        else 
            iq_3_ap_vld_in_sig <= iq_3_ap_vld_preg;
        end if; 
    end process;


    iq_3_blk_n_assign_proc : process(iq_3_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_3_blk_n <= iq_3_ap_vld;
        else 
            iq_3_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq_3_in_sig_assign_proc : process(iq_3, iq_3_preg, iq_3_ap_vld)
    begin
        if ((iq_3_ap_vld = ap_const_logic_1)) then 
            iq_3_in_sig <= iq_3;
        else 
            iq_3_in_sig <= iq_3_preg;
        end if; 
    end process;


    iq_4_ap_vld_in_sig_assign_proc : process(iq_4_ap_vld, iq_4_ap_vld_preg)
    begin
        if ((iq_4_ap_vld = ap_const_logic_1)) then 
            iq_4_ap_vld_in_sig <= iq_4_ap_vld;
        else 
            iq_4_ap_vld_in_sig <= iq_4_ap_vld_preg;
        end if; 
    end process;


    iq_4_blk_n_assign_proc : process(iq_4_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_4_blk_n <= iq_4_ap_vld;
        else 
            iq_4_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq_4_in_sig_assign_proc : process(iq_4, iq_4_preg, iq_4_ap_vld)
    begin
        if ((iq_4_ap_vld = ap_const_logic_1)) then 
            iq_4_in_sig <= iq_4;
        else 
            iq_4_in_sig <= iq_4_preg;
        end if; 
    end process;


    iq_5_ap_vld_in_sig_assign_proc : process(iq_5_ap_vld, iq_5_ap_vld_preg)
    begin
        if ((iq_5_ap_vld = ap_const_logic_1)) then 
            iq_5_ap_vld_in_sig <= iq_5_ap_vld;
        else 
            iq_5_ap_vld_in_sig <= iq_5_ap_vld_preg;
        end if; 
    end process;


    iq_5_blk_n_assign_proc : process(iq_5_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_5_blk_n <= iq_5_ap_vld;
        else 
            iq_5_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq_5_in_sig_assign_proc : process(iq_5, iq_5_preg, iq_5_ap_vld)
    begin
        if ((iq_5_ap_vld = ap_const_logic_1)) then 
            iq_5_in_sig <= iq_5;
        else 
            iq_5_in_sig <= iq_5_preg;
        end if; 
    end process;


    iq_6_ap_vld_in_sig_assign_proc : process(iq_6_ap_vld, iq_6_ap_vld_preg)
    begin
        if ((iq_6_ap_vld = ap_const_logic_1)) then 
            iq_6_ap_vld_in_sig <= iq_6_ap_vld;
        else 
            iq_6_ap_vld_in_sig <= iq_6_ap_vld_preg;
        end if; 
    end process;


    iq_6_blk_n_assign_proc : process(iq_6_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_6_blk_n <= iq_6_ap_vld;
        else 
            iq_6_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq_6_in_sig_assign_proc : process(iq_6, iq_6_preg, iq_6_ap_vld)
    begin
        if ((iq_6_ap_vld = ap_const_logic_1)) then 
            iq_6_in_sig <= iq_6;
        else 
            iq_6_in_sig <= iq_6_preg;
        end if; 
    end process;


    iq_7_ap_vld_in_sig_assign_proc : process(iq_7_ap_vld, iq_7_ap_vld_preg)
    begin
        if ((iq_7_ap_vld = ap_const_logic_1)) then 
            iq_7_ap_vld_in_sig <= iq_7_ap_vld;
        else 
            iq_7_ap_vld_in_sig <= iq_7_ap_vld_preg;
        end if; 
    end process;


    iq_7_blk_n_assign_proc : process(iq_7_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_7_blk_n <= iq_7_ap_vld;
        else 
            iq_7_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq_7_in_sig_assign_proc : process(iq_7, iq_7_preg, iq_7_ap_vld)
    begin
        if ((iq_7_ap_vld = ap_const_logic_1)) then 
            iq_7_in_sig <= iq_7;
        else 
            iq_7_in_sig <= iq_7_preg;
        end if; 
    end process;


    iq_8_ap_vld_in_sig_assign_proc : process(iq_8_ap_vld, iq_8_ap_vld_preg)
    begin
        if ((iq_8_ap_vld = ap_const_logic_1)) then 
            iq_8_ap_vld_in_sig <= iq_8_ap_vld;
        else 
            iq_8_ap_vld_in_sig <= iq_8_ap_vld_preg;
        end if; 
    end process;


    iq_8_blk_n_assign_proc : process(iq_8_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_8_blk_n <= iq_8_ap_vld;
        else 
            iq_8_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq_8_in_sig_assign_proc : process(iq_8, iq_8_preg, iq_8_ap_vld)
    begin
        if ((iq_8_ap_vld = ap_const_logic_1)) then 
            iq_8_in_sig <= iq_8;
        else 
            iq_8_in_sig <= iq_8_preg;
        end if; 
    end process;


    iq_9_ap_vld_in_sig_assign_proc : process(iq_9_ap_vld, iq_9_ap_vld_preg)
    begin
        if ((iq_9_ap_vld = ap_const_logic_1)) then 
            iq_9_ap_vld_in_sig <= iq_9_ap_vld;
        else 
            iq_9_ap_vld_in_sig <= iq_9_ap_vld_preg;
        end if; 
    end process;


    iq_9_blk_n_assign_proc : process(iq_9_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            iq_9_blk_n <= iq_9_ap_vld;
        else 
            iq_9_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq_9_in_sig_assign_proc : process(iq_9, iq_9_preg, iq_9_ap_vld)
    begin
        if ((iq_9_ap_vld = ap_const_logic_1)) then 
            iq_9_in_sig <= iq_9;
        else 
            iq_9_in_sig <= iq_9_preg;
        end if; 
    end process;


    output_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, output_r_TREADY_int)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            output_r_TDATA_blk_n <= output_r_TREADY_int;
        else 
            output_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_r_TDATA_int <= (((((((((((((((iq_15_in_sig & iq_14_in_sig) & iq_13_in_sig) & iq_12_in_sig) & iq_11_in_sig) & iq_10_in_sig) & iq_9_in_sig) & iq_8_in_sig) & iq_7_in_sig) & iq_6_in_sig) & iq_5_in_sig) & iq_4_in_sig) & iq_3_in_sig) & iq_2_in_sig) & iq_1_in_sig) & iq_0_in_sig);
    output_r_TLAST_int <= '1' when (group_r = ap_const_lv8_FF) else '0';
    output_r_TUSER_int <= std_logic_vector(IEEE.numeric_std.resize(unsigned(scale_V_in_sig),32));
    output_r_TVALID <= regslice_forward_output_data_U_vld_out;

    output_r_TVALID_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            output_r_TVALID_int <= ap_const_logic_1;
        else 
            output_r_TVALID_int <= ap_const_logic_0;
        end if; 
    end process;


    scale_V_ap_vld_in_sig_assign_proc : process(scale_V_ap_vld, scale_V_ap_vld_preg)
    begin
        if ((scale_V_ap_vld = ap_const_logic_1)) then 
            scale_V_ap_vld_in_sig <= scale_V_ap_vld;
        else 
            scale_V_ap_vld_in_sig <= scale_V_ap_vld_preg;
        end if; 
    end process;


    scale_V_blk_n_assign_proc : process(scale_V_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            scale_V_blk_n <= scale_V_ap_vld;
        else 
            scale_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    scale_V_in_sig_assign_proc : process(scale_V, scale_V_preg, scale_V_ap_vld)
    begin
        if ((scale_V_ap_vld = ap_const_logic_1)) then 
            scale_V_in_sig <= scale_V;
        else 
            scale_V_in_sig <= scale_V_preg;
        end if; 
    end process;

end behav;
