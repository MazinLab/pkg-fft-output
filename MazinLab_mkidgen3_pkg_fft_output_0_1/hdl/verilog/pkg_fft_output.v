// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pkg_fft_output,hls_ip_2019_2_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=0.849000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=551,HLS_SYN_LUT=655,HLS_VERSION=2019_2_1}" *)

module pkg_fft_output (
        ap_clk,
        ap_rst_n,
        iq_0,
        iq_0_ap_vld,
        iq_1,
        iq_1_ap_vld,
        iq_2,
        iq_2_ap_vld,
        iq_3,
        iq_3_ap_vld,
        iq_4,
        iq_4_ap_vld,
        iq_5,
        iq_5_ap_vld,
        iq_6,
        iq_6_ap_vld,
        iq_7,
        iq_7_ap_vld,
        iq_8,
        iq_8_ap_vld,
        iq_9,
        iq_9_ap_vld,
        iq_10,
        iq_10_ap_vld,
        iq_11,
        iq_11_ap_vld,
        iq_12,
        iq_12_ap_vld,
        iq_13,
        iq_13_ap_vld,
        iq_14,
        iq_14_ap_vld,
        iq_15,
        iq_15_ap_vld,
        scale_V,
        scale_V_ap_vld,
        output_r_TDATA,
        output_r_TVALID,
        output_r_TREADY,
        output_r_TUSER,
        output_r_TLAST
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst_n;
input  [31:0] iq_0;
input   iq_0_ap_vld;
input  [31:0] iq_1;
input   iq_1_ap_vld;
input  [31:0] iq_2;
input   iq_2_ap_vld;
input  [31:0] iq_3;
input   iq_3_ap_vld;
input  [31:0] iq_4;
input   iq_4_ap_vld;
input  [31:0] iq_5;
input   iq_5_ap_vld;
input  [31:0] iq_6;
input   iq_6_ap_vld;
input  [31:0] iq_7;
input   iq_7_ap_vld;
input  [31:0] iq_8;
input   iq_8_ap_vld;
input  [31:0] iq_9;
input   iq_9_ap_vld;
input  [31:0] iq_10;
input   iq_10_ap_vld;
input  [31:0] iq_11;
input   iq_11_ap_vld;
input  [31:0] iq_12;
input   iq_12_ap_vld;
input  [31:0] iq_13;
input   iq_13_ap_vld;
input  [31:0] iq_14;
input   iq_14_ap_vld;
input  [31:0] iq_15;
input   iq_15_ap_vld;
input  [11:0] scale_V;
input   scale_V_ap_vld;
output  [511:0] output_r_TDATA;
output   output_r_TVALID;
input   output_r_TREADY;
output  [31:0] output_r_TUSER;
output   output_r_TLAST;

 reg    ap_rst_n_inv;
reg   [31:0] iq_0_preg;
reg   [31:0] iq_0_in_sig;
reg    iq_0_ap_vld_preg;
reg    iq_0_ap_vld_in_sig;
reg   [31:0] iq_1_preg;
reg   [31:0] iq_1_in_sig;
reg    iq_1_ap_vld_preg;
reg    iq_1_ap_vld_in_sig;
reg   [31:0] iq_2_preg;
reg   [31:0] iq_2_in_sig;
reg    iq_2_ap_vld_preg;
reg    iq_2_ap_vld_in_sig;
reg   [31:0] iq_3_preg;
reg   [31:0] iq_3_in_sig;
reg    iq_3_ap_vld_preg;
reg    iq_3_ap_vld_in_sig;
reg   [31:0] iq_4_preg;
reg   [31:0] iq_4_in_sig;
reg    iq_4_ap_vld_preg;
reg    iq_4_ap_vld_in_sig;
reg   [31:0] iq_5_preg;
reg   [31:0] iq_5_in_sig;
reg    iq_5_ap_vld_preg;
reg    iq_5_ap_vld_in_sig;
reg   [31:0] iq_6_preg;
reg   [31:0] iq_6_in_sig;
reg    iq_6_ap_vld_preg;
reg    iq_6_ap_vld_in_sig;
reg   [31:0] iq_7_preg;
reg   [31:0] iq_7_in_sig;
reg    iq_7_ap_vld_preg;
reg    iq_7_ap_vld_in_sig;
reg   [31:0] iq_8_preg;
reg   [31:0] iq_8_in_sig;
reg    iq_8_ap_vld_preg;
reg    iq_8_ap_vld_in_sig;
reg   [31:0] iq_9_preg;
reg   [31:0] iq_9_in_sig;
reg    iq_9_ap_vld_preg;
reg    iq_9_ap_vld_in_sig;
reg   [31:0] iq_10_preg;
reg   [31:0] iq_10_in_sig;
reg    iq_10_ap_vld_preg;
reg    iq_10_ap_vld_in_sig;
reg   [31:0] iq_11_preg;
reg   [31:0] iq_11_in_sig;
reg    iq_11_ap_vld_preg;
reg    iq_11_ap_vld_in_sig;
reg   [31:0] iq_12_preg;
reg   [31:0] iq_12_in_sig;
reg    iq_12_ap_vld_preg;
reg    iq_12_ap_vld_in_sig;
reg   [31:0] iq_13_preg;
reg   [31:0] iq_13_in_sig;
reg    iq_13_ap_vld_preg;
reg    iq_13_ap_vld_in_sig;
reg   [31:0] iq_14_preg;
reg   [31:0] iq_14_in_sig;
reg    iq_14_ap_vld_preg;
reg    iq_14_ap_vld_in_sig;
reg   [31:0] iq_15_preg;
reg   [31:0] iq_15_in_sig;
reg    iq_15_ap_vld_preg;
reg    iq_15_ap_vld_in_sig;
reg   [11:0] scale_V_preg;
reg   [11:0] scale_V_in_sig;
reg    scale_V_ap_vld_preg;
reg    scale_V_ap_vld_in_sig;
reg   [7:0] group_r;
reg    iq_0_blk_n;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_pp0_stage0;
reg    iq_1_blk_n;
reg    iq_2_blk_n;
reg    iq_3_blk_n;
reg    iq_4_blk_n;
reg    iq_5_blk_n;
reg    iq_6_blk_n;
reg    iq_7_blk_n;
reg    iq_8_blk_n;
reg    iq_9_blk_n;
reg    iq_10_blk_n;
reg    iq_11_blk_n;
reg    iq_12_blk_n;
reg    iq_13_blk_n;
reg    iq_14_blk_n;
reg    iq_15_blk_n;
reg    scale_V_blk_n;
reg    output_r_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter1;
reg    ap_block_state1_pp0_stage0_iter0;
wire    regslice_forward_output_data_U_apdone_blk;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg    ap_block_pp0_stage0_subdone;
wire   [7:0] add_ln18_fu_246_p2;
reg    ap_block_pp0_stage0_01001;
reg   [0:0] ap_NS_fsm;
wire    ap_reset_idle_pp0;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire   [511:0] output_r_TDATA_int;
reg    output_r_TVALID_int;
wire    output_r_TREADY_int;
wire    regslice_forward_output_data_U_vld_out;
wire    regslice_forward_output_user_U_apdone_blk;
wire   [31:0] output_r_TUSER_int;
wire    regslice_forward_output_user_U_ack_in_dummy;
wire    regslice_forward_output_user_U_vld_out;
wire    regslice_forward_w1_output_last_U_apdone_blk;
wire    output_r_TLAST_int;
wire    regslice_forward_w1_output_last_U_ack_in_dummy;
wire    regslice_forward_w1_output_last_U_vld_out;

// power-on initialization
initial begin
#0 iq_0_preg = 32'd0;
#0 iq_0_ap_vld_preg = 1'b0;
#0 iq_1_preg = 32'd0;
#0 iq_1_ap_vld_preg = 1'b0;
#0 iq_2_preg = 32'd0;
#0 iq_2_ap_vld_preg = 1'b0;
#0 iq_3_preg = 32'd0;
#0 iq_3_ap_vld_preg = 1'b0;
#0 iq_4_preg = 32'd0;
#0 iq_4_ap_vld_preg = 1'b0;
#0 iq_5_preg = 32'd0;
#0 iq_5_ap_vld_preg = 1'b0;
#0 iq_6_preg = 32'd0;
#0 iq_6_ap_vld_preg = 1'b0;
#0 iq_7_preg = 32'd0;
#0 iq_7_ap_vld_preg = 1'b0;
#0 iq_8_preg = 32'd0;
#0 iq_8_ap_vld_preg = 1'b0;
#0 iq_9_preg = 32'd0;
#0 iq_9_ap_vld_preg = 1'b0;
#0 iq_10_preg = 32'd0;
#0 iq_10_ap_vld_preg = 1'b0;
#0 iq_11_preg = 32'd0;
#0 iq_11_ap_vld_preg = 1'b0;
#0 iq_12_preg = 32'd0;
#0 iq_12_ap_vld_preg = 1'b0;
#0 iq_13_preg = 32'd0;
#0 iq_13_ap_vld_preg = 1'b0;
#0 iq_14_preg = 32'd0;
#0 iq_14_ap_vld_preg = 1'b0;
#0 iq_15_preg = 32'd0;
#0 iq_15_ap_vld_preg = 1'b0;
#0 scale_V_preg = 12'd0;
#0 scale_V_ap_vld_preg = 1'b0;
#0 group_r = 8'd0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
end

regslice_forward #(
    .DataWidth( 512 ))
regslice_forward_output_data_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TDATA_int),
    .vld_in(output_r_TVALID_int),
    .ack_in(output_r_TREADY_int),
    .data_out(output_r_TDATA),
    .vld_out(regslice_forward_output_data_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_forward_output_data_U_apdone_blk)
);

regslice_forward #(
    .DataWidth( 32 ))
regslice_forward_output_user_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TUSER_int),
    .vld_in(output_r_TVALID_int),
    .ack_in(regslice_forward_output_user_U_ack_in_dummy),
    .data_out(output_r_TUSER),
    .vld_out(regslice_forward_output_user_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_forward_output_user_U_apdone_blk)
);

regslice_forward_w1 #(
    .DataWidth( 1 ))
regslice_forward_w1_output_last_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .data_in(output_r_TLAST_int),
    .vld_in(output_r_TVALID_int),
    .ack_in(regslice_forward_w1_output_last_U_ack_in_dummy),
    .data_out(output_r_TLAST),
    .vld_out(regslice_forward_w1_output_last_U_vld_out),
    .ack_out(output_r_TREADY),
    .apdone_blk(regslice_forward_w1_output_last_U_apdone_blk)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_0_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            iq_0_ap_vld_preg <= 1'b0;
        end else if ((iq_0_ap_vld == 1'b1)) begin
            iq_0_ap_vld_preg <= iq_0_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_0_preg <= 32'd0;
    end else begin
        if ((iq_0_ap_vld == 1'b1)) begin
            iq_0_preg <= iq_0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_10_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            iq_10_ap_vld_preg <= 1'b0;
        end else if ((iq_10_ap_vld == 1'b1)) begin
            iq_10_ap_vld_preg <= iq_10_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_10_preg <= 32'd0;
    end else begin
        if ((iq_10_ap_vld == 1'b1)) begin
            iq_10_preg <= iq_10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_11_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            iq_11_ap_vld_preg <= 1'b0;
        end else if ((iq_11_ap_vld == 1'b1)) begin
            iq_11_ap_vld_preg <= iq_11_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_11_preg <= 32'd0;
    end else begin
        if ((iq_11_ap_vld == 1'b1)) begin
            iq_11_preg <= iq_11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_12_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            iq_12_ap_vld_preg <= 1'b0;
        end else if ((iq_12_ap_vld == 1'b1)) begin
            iq_12_ap_vld_preg <= iq_12_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_12_preg <= 32'd0;
    end else begin
        if ((iq_12_ap_vld == 1'b1)) begin
            iq_12_preg <= iq_12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_13_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            iq_13_ap_vld_preg <= 1'b0;
        end else if ((iq_13_ap_vld == 1'b1)) begin
            iq_13_ap_vld_preg <= iq_13_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_13_preg <= 32'd0;
    end else begin
        if ((iq_13_ap_vld == 1'b1)) begin
            iq_13_preg <= iq_13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_14_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            iq_14_ap_vld_preg <= 1'b0;
        end else if ((iq_14_ap_vld == 1'b1)) begin
            iq_14_ap_vld_preg <= iq_14_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_14_preg <= 32'd0;
    end else begin
        if ((iq_14_ap_vld == 1'b1)) begin
            iq_14_preg <= iq_14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_15_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            iq_15_ap_vld_preg <= 1'b0;
        end else if ((iq_15_ap_vld == 1'b1)) begin
            iq_15_ap_vld_preg <= iq_15_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_15_preg <= 32'd0;
    end else begin
        if ((iq_15_ap_vld == 1'b1)) begin
            iq_15_preg <= iq_15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_1_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            iq_1_ap_vld_preg <= 1'b0;
        end else if ((iq_1_ap_vld == 1'b1)) begin
            iq_1_ap_vld_preg <= iq_1_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_1_preg <= 32'd0;
    end else begin
        if ((iq_1_ap_vld == 1'b1)) begin
            iq_1_preg <= iq_1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_2_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            iq_2_ap_vld_preg <= 1'b0;
        end else if ((iq_2_ap_vld == 1'b1)) begin
            iq_2_ap_vld_preg <= iq_2_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_2_preg <= 32'd0;
    end else begin
        if ((iq_2_ap_vld == 1'b1)) begin
            iq_2_preg <= iq_2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_3_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            iq_3_ap_vld_preg <= 1'b0;
        end else if ((iq_3_ap_vld == 1'b1)) begin
            iq_3_ap_vld_preg <= iq_3_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_3_preg <= 32'd0;
    end else begin
        if ((iq_3_ap_vld == 1'b1)) begin
            iq_3_preg <= iq_3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_4_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            iq_4_ap_vld_preg <= 1'b0;
        end else if ((iq_4_ap_vld == 1'b1)) begin
            iq_4_ap_vld_preg <= iq_4_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_4_preg <= 32'd0;
    end else begin
        if ((iq_4_ap_vld == 1'b1)) begin
            iq_4_preg <= iq_4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_5_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            iq_5_ap_vld_preg <= 1'b0;
        end else if ((iq_5_ap_vld == 1'b1)) begin
            iq_5_ap_vld_preg <= iq_5_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_5_preg <= 32'd0;
    end else begin
        if ((iq_5_ap_vld == 1'b1)) begin
            iq_5_preg <= iq_5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_6_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            iq_6_ap_vld_preg <= 1'b0;
        end else if ((iq_6_ap_vld == 1'b1)) begin
            iq_6_ap_vld_preg <= iq_6_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_6_preg <= 32'd0;
    end else begin
        if ((iq_6_ap_vld == 1'b1)) begin
            iq_6_preg <= iq_6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_7_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            iq_7_ap_vld_preg <= 1'b0;
        end else if ((iq_7_ap_vld == 1'b1)) begin
            iq_7_ap_vld_preg <= iq_7_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_7_preg <= 32'd0;
    end else begin
        if ((iq_7_ap_vld == 1'b1)) begin
            iq_7_preg <= iq_7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_8_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            iq_8_ap_vld_preg <= 1'b0;
        end else if ((iq_8_ap_vld == 1'b1)) begin
            iq_8_ap_vld_preg <= iq_8_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_8_preg <= 32'd0;
    end else begin
        if ((iq_8_ap_vld == 1'b1)) begin
            iq_8_preg <= iq_8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_9_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            iq_9_ap_vld_preg <= 1'b0;
        end else if ((iq_9_ap_vld == 1'b1)) begin
            iq_9_ap_vld_preg <= iq_9_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        iq_9_preg <= 32'd0;
    end else begin
        if ((iq_9_ap_vld == 1'b1)) begin
            iq_9_preg <= iq_9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        scale_V_ap_vld_preg <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            scale_V_ap_vld_preg <= 1'b0;
        end else if ((scale_V_ap_vld == 1'b1)) begin
            scale_V_ap_vld_preg <= scale_V_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        scale_V_preg <= 12'd0;
    end else begin
        if ((scale_V_ap_vld == 1'b1)) begin
            scale_V_preg <= scale_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        group_r <= add_ln18_fu_246_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (1'b1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

assign ap_reset_idle_pp0 = 1'b0;

always @ (*) begin
    if ((iq_0_ap_vld == 1'b1)) begin
        iq_0_ap_vld_in_sig = iq_0_ap_vld;
    end else begin
        iq_0_ap_vld_in_sig = iq_0_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_0_blk_n = iq_0_ap_vld;
    end else begin
        iq_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((iq_0_ap_vld == 1'b1)) begin
        iq_0_in_sig = iq_0;
    end else begin
        iq_0_in_sig = iq_0_preg;
    end
end

always @ (*) begin
    if ((iq_10_ap_vld == 1'b1)) begin
        iq_10_ap_vld_in_sig = iq_10_ap_vld;
    end else begin
        iq_10_ap_vld_in_sig = iq_10_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_10_blk_n = iq_10_ap_vld;
    end else begin
        iq_10_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((iq_10_ap_vld == 1'b1)) begin
        iq_10_in_sig = iq_10;
    end else begin
        iq_10_in_sig = iq_10_preg;
    end
end

always @ (*) begin
    if ((iq_11_ap_vld == 1'b1)) begin
        iq_11_ap_vld_in_sig = iq_11_ap_vld;
    end else begin
        iq_11_ap_vld_in_sig = iq_11_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_11_blk_n = iq_11_ap_vld;
    end else begin
        iq_11_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((iq_11_ap_vld == 1'b1)) begin
        iq_11_in_sig = iq_11;
    end else begin
        iq_11_in_sig = iq_11_preg;
    end
end

always @ (*) begin
    if ((iq_12_ap_vld == 1'b1)) begin
        iq_12_ap_vld_in_sig = iq_12_ap_vld;
    end else begin
        iq_12_ap_vld_in_sig = iq_12_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_12_blk_n = iq_12_ap_vld;
    end else begin
        iq_12_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((iq_12_ap_vld == 1'b1)) begin
        iq_12_in_sig = iq_12;
    end else begin
        iq_12_in_sig = iq_12_preg;
    end
end

always @ (*) begin
    if ((iq_13_ap_vld == 1'b1)) begin
        iq_13_ap_vld_in_sig = iq_13_ap_vld;
    end else begin
        iq_13_ap_vld_in_sig = iq_13_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_13_blk_n = iq_13_ap_vld;
    end else begin
        iq_13_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((iq_13_ap_vld == 1'b1)) begin
        iq_13_in_sig = iq_13;
    end else begin
        iq_13_in_sig = iq_13_preg;
    end
end

always @ (*) begin
    if ((iq_14_ap_vld == 1'b1)) begin
        iq_14_ap_vld_in_sig = iq_14_ap_vld;
    end else begin
        iq_14_ap_vld_in_sig = iq_14_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_14_blk_n = iq_14_ap_vld;
    end else begin
        iq_14_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((iq_14_ap_vld == 1'b1)) begin
        iq_14_in_sig = iq_14;
    end else begin
        iq_14_in_sig = iq_14_preg;
    end
end

always @ (*) begin
    if ((iq_15_ap_vld == 1'b1)) begin
        iq_15_ap_vld_in_sig = iq_15_ap_vld;
    end else begin
        iq_15_ap_vld_in_sig = iq_15_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_15_blk_n = iq_15_ap_vld;
    end else begin
        iq_15_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((iq_15_ap_vld == 1'b1)) begin
        iq_15_in_sig = iq_15;
    end else begin
        iq_15_in_sig = iq_15_preg;
    end
end

always @ (*) begin
    if ((iq_1_ap_vld == 1'b1)) begin
        iq_1_ap_vld_in_sig = iq_1_ap_vld;
    end else begin
        iq_1_ap_vld_in_sig = iq_1_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_1_blk_n = iq_1_ap_vld;
    end else begin
        iq_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((iq_1_ap_vld == 1'b1)) begin
        iq_1_in_sig = iq_1;
    end else begin
        iq_1_in_sig = iq_1_preg;
    end
end

always @ (*) begin
    if ((iq_2_ap_vld == 1'b1)) begin
        iq_2_ap_vld_in_sig = iq_2_ap_vld;
    end else begin
        iq_2_ap_vld_in_sig = iq_2_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_2_blk_n = iq_2_ap_vld;
    end else begin
        iq_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((iq_2_ap_vld == 1'b1)) begin
        iq_2_in_sig = iq_2;
    end else begin
        iq_2_in_sig = iq_2_preg;
    end
end

always @ (*) begin
    if ((iq_3_ap_vld == 1'b1)) begin
        iq_3_ap_vld_in_sig = iq_3_ap_vld;
    end else begin
        iq_3_ap_vld_in_sig = iq_3_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_3_blk_n = iq_3_ap_vld;
    end else begin
        iq_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((iq_3_ap_vld == 1'b1)) begin
        iq_3_in_sig = iq_3;
    end else begin
        iq_3_in_sig = iq_3_preg;
    end
end

always @ (*) begin
    if ((iq_4_ap_vld == 1'b1)) begin
        iq_4_ap_vld_in_sig = iq_4_ap_vld;
    end else begin
        iq_4_ap_vld_in_sig = iq_4_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_4_blk_n = iq_4_ap_vld;
    end else begin
        iq_4_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((iq_4_ap_vld == 1'b1)) begin
        iq_4_in_sig = iq_4;
    end else begin
        iq_4_in_sig = iq_4_preg;
    end
end

always @ (*) begin
    if ((iq_5_ap_vld == 1'b1)) begin
        iq_5_ap_vld_in_sig = iq_5_ap_vld;
    end else begin
        iq_5_ap_vld_in_sig = iq_5_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_5_blk_n = iq_5_ap_vld;
    end else begin
        iq_5_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((iq_5_ap_vld == 1'b1)) begin
        iq_5_in_sig = iq_5;
    end else begin
        iq_5_in_sig = iq_5_preg;
    end
end

always @ (*) begin
    if ((iq_6_ap_vld == 1'b1)) begin
        iq_6_ap_vld_in_sig = iq_6_ap_vld;
    end else begin
        iq_6_ap_vld_in_sig = iq_6_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_6_blk_n = iq_6_ap_vld;
    end else begin
        iq_6_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((iq_6_ap_vld == 1'b1)) begin
        iq_6_in_sig = iq_6;
    end else begin
        iq_6_in_sig = iq_6_preg;
    end
end

always @ (*) begin
    if ((iq_7_ap_vld == 1'b1)) begin
        iq_7_ap_vld_in_sig = iq_7_ap_vld;
    end else begin
        iq_7_ap_vld_in_sig = iq_7_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_7_blk_n = iq_7_ap_vld;
    end else begin
        iq_7_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((iq_7_ap_vld == 1'b1)) begin
        iq_7_in_sig = iq_7;
    end else begin
        iq_7_in_sig = iq_7_preg;
    end
end

always @ (*) begin
    if ((iq_8_ap_vld == 1'b1)) begin
        iq_8_ap_vld_in_sig = iq_8_ap_vld;
    end else begin
        iq_8_ap_vld_in_sig = iq_8_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_8_blk_n = iq_8_ap_vld;
    end else begin
        iq_8_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((iq_8_ap_vld == 1'b1)) begin
        iq_8_in_sig = iq_8;
    end else begin
        iq_8_in_sig = iq_8_preg;
    end
end

always @ (*) begin
    if ((iq_9_ap_vld == 1'b1)) begin
        iq_9_ap_vld_in_sig = iq_9_ap_vld;
    end else begin
        iq_9_ap_vld_in_sig = iq_9_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        iq_9_blk_n = iq_9_ap_vld;
    end else begin
        iq_9_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((iq_9_ap_vld == 1'b1)) begin
        iq_9_in_sig = iq_9;
    end else begin
        iq_9_in_sig = iq_9_preg;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)) | ((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0)))) begin
        output_r_TDATA_blk_n = output_r_TREADY_int;
    end else begin
        output_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        output_r_TVALID_int = 1'b1;
    end else begin
        output_r_TVALID_int = 1'b0;
    end
end

always @ (*) begin
    if ((scale_V_ap_vld == 1'b1)) begin
        scale_V_ap_vld_in_sig = scale_V_ap_vld;
    end else begin
        scale_V_ap_vld_in_sig = scale_V_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        scale_V_blk_n = scale_V_ap_vld;
    end else begin
        scale_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((scale_V_ap_vld == 1'b1)) begin
        scale_V_in_sig = scale_V;
    end else begin
        scale_V_in_sig = scale_V_preg;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln18_fu_246_p2 = (group_r + 8'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((regslice_forward_output_data_U_apdone_blk == 1'b1) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((1'b1 == 1'b1) & ((iq_11_ap_vld_in_sig == 1'b0) | (iq_10_ap_vld_in_sig == 1'b0) | (iq_9_ap_vld_in_sig == 1'b0) | (iq_8_ap_vld_in_sig == 1'b0) | (iq_7_ap_vld_in_sig == 1'b0) | (iq_6_ap_vld_in_sig == 1'b0) | (iq_5_ap_vld_in_sig == 1'b0) | (iq_4_ap_vld_in_sig == 1'b0) | (iq_3_ap_vld_in_sig == 1'b0) | (iq_2_ap_vld_in_sig == 1'b0) | (iq_1_ap_vld_in_sig == 1'b0) | (iq_0_ap_vld_in_sig == 1'b0) | (scale_V_ap_vld_in_sig == 1'b0) | (iq_15_ap_vld_in_sig == 1'b0) | (iq_14_ap_vld_in_sig == 1'b0) | (iq_13_ap_vld_in_sig == 1'b0) | (iq_12_ap_vld_in_sig == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((output_r_TREADY_int == 1'b0) | (regslice_forward_output_data_U_apdone_blk == 1'b1))) | ((1'b1 == 1'b1) & ((iq_11_ap_vld_in_sig == 1'b0) | (iq_10_ap_vld_in_sig == 1'b0) | (iq_9_ap_vld_in_sig == 1'b0) | (iq_8_ap_vld_in_sig == 1'b0) | (iq_7_ap_vld_in_sig == 1'b0) | (iq_6_ap_vld_in_sig == 1'b0) | (iq_5_ap_vld_in_sig == 1'b0) | (iq_4_ap_vld_in_sig == 1'b0) | (iq_3_ap_vld_in_sig == 1'b0) | (output_r_TREADY_int == 1'b0) | (iq_2_ap_vld_in_sig == 1'b0) | (iq_1_ap_vld_in_sig == 1'b0) | (iq_0_ap_vld_in_sig == 1'b0) | (scale_V_ap_vld_in_sig == 1'b0) | (iq_15_ap_vld_in_sig == 1'b0) | (iq_14_ap_vld_in_sig == 1'b0) | (iq_13_ap_vld_in_sig == 1'b0) | (iq_12_ap_vld_in_sig == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & ((output_r_TREADY_int == 1'b0) | (regslice_forward_output_data_U_apdone_blk == 1'b1))) | ((1'b1 == 1'b1) & ((iq_11_ap_vld_in_sig == 1'b0) | (iq_10_ap_vld_in_sig == 1'b0) | (iq_9_ap_vld_in_sig == 1'b0) | (iq_8_ap_vld_in_sig == 1'b0) | (iq_7_ap_vld_in_sig == 1'b0) | (iq_6_ap_vld_in_sig == 1'b0) | (iq_5_ap_vld_in_sig == 1'b0) | (iq_4_ap_vld_in_sig == 1'b0) | (iq_3_ap_vld_in_sig == 1'b0) | (output_r_TREADY_int == 1'b0) | (iq_2_ap_vld_in_sig == 1'b0) | (iq_1_ap_vld_in_sig == 1'b0) | (iq_0_ap_vld_in_sig == 1'b0) | (scale_V_ap_vld_in_sig == 1'b0) | (iq_15_ap_vld_in_sig == 1'b0) | (iq_14_ap_vld_in_sig == 1'b0) | (iq_13_ap_vld_in_sig == 1'b0) | (iq_12_ap_vld_in_sig == 1'b0))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((iq_11_ap_vld_in_sig == 1'b0) | (iq_10_ap_vld_in_sig == 1'b0) | (iq_9_ap_vld_in_sig == 1'b0) | (iq_8_ap_vld_in_sig == 1'b0) | (iq_7_ap_vld_in_sig == 1'b0) | (iq_6_ap_vld_in_sig == 1'b0) | (iq_5_ap_vld_in_sig == 1'b0) | (iq_4_ap_vld_in_sig == 1'b0) | (iq_3_ap_vld_in_sig == 1'b0) | (iq_2_ap_vld_in_sig == 1'b0) | (iq_1_ap_vld_in_sig == 1'b0) | (iq_0_ap_vld_in_sig == 1'b0) | (scale_V_ap_vld_in_sig == 1'b0) | (iq_15_ap_vld_in_sig == 1'b0) | (iq_14_ap_vld_in_sig == 1'b0) | (iq_13_ap_vld_in_sig == 1'b0) | (iq_12_ap_vld_in_sig == 1'b0));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (regslice_forward_output_data_U_apdone_blk == 1'b1);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign output_r_TDATA_int = {{{{{{{{{{{{{{{{iq_15_in_sig}, {iq_14_in_sig}}, {iq_13_in_sig}}, {iq_12_in_sig}}, {iq_11_in_sig}}, {iq_10_in_sig}}, {iq_9_in_sig}}, {iq_8_in_sig}}, {iq_7_in_sig}}, {iq_6_in_sig}}, {iq_5_in_sig}}, {iq_4_in_sig}}, {iq_3_in_sig}}, {iq_2_in_sig}}, {iq_1_in_sig}}, {iq_0_in_sig}};

assign output_r_TLAST_int = ((group_r == 8'd255) ? 1'b1 : 1'b0);

assign output_r_TUSER_int = scale_V_in_sig;

assign output_r_TVALID = regslice_forward_output_data_U_vld_out;

endmodule //pkg_fft_output
