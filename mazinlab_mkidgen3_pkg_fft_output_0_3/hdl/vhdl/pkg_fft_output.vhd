-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pkg_fft_output is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    iq00 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq00_ap_vld : IN STD_LOGIC;
    iq01 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq01_ap_vld : IN STD_LOGIC;
    iq02 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq02_ap_vld : IN STD_LOGIC;
    iq03 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq03_ap_vld : IN STD_LOGIC;
    iq04 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq04_ap_vld : IN STD_LOGIC;
    iq05 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq05_ap_vld : IN STD_LOGIC;
    iq06 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq06_ap_vld : IN STD_LOGIC;
    iq07 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq07_ap_vld : IN STD_LOGIC;
    iq08 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq08_ap_vld : IN STD_LOGIC;
    iq09 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq09_ap_vld : IN STD_LOGIC;
    iq10 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq10_ap_vld : IN STD_LOGIC;
    iq11 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq11_ap_vld : IN STD_LOGIC;
    iq12 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq12_ap_vld : IN STD_LOGIC;
    iq13 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq13_ap_vld : IN STD_LOGIC;
    iq14 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq14_ap_vld : IN STD_LOGIC;
    iq15 : IN STD_LOGIC_VECTOR (31 downto 0);
    iq15_ap_vld : IN STD_LOGIC;
    scale : IN STD_LOGIC_VECTOR (11 downto 0);
    scale_ap_vld : IN STD_LOGIC;
    output_r_TDATA : OUT STD_LOGIC_VECTOR (511 downto 0);
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC;
    output_r_TKEEP : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_r_TSTRB : OUT STD_LOGIC_VECTOR (63 downto 0);
    output_r_TUSER : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of pkg_fft_output is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pkg_fft_output_pkg_fft_output,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu28dr-ffvg1517-2-e,HLS_INPUT_CLOCK=1.818000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=0.849000,HLS_SYN_LAT=1,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=551,HLS_SYN_LUT=655,HLS_VERSION=2021_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv512_lc_1 : STD_LOGIC_VECTOR (511 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_9C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011100";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_BB : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111011";
    constant ap_const_lv32_C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011000000";
    constant ap_const_lv32_DA : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011011010";
    constant ap_const_lv32_E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011100000";
    constant ap_const_lv32_F9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000011111001";
    constant ap_const_lv32_100 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_const_lv32_118 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100011000";
    constant ap_const_lv32_120 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100100000";
    constant ap_const_lv32_137 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100110111";
    constant ap_const_lv32_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101000000";
    constant ap_const_lv32_156 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101010110";
    constant ap_const_lv32_160 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101100000";
    constant ap_const_lv32_175 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000101110101";
    constant ap_const_lv32_180 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110000000";
    constant ap_const_lv32_194 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110010100";
    constant ap_const_lv32_1A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110100000";
    constant ap_const_lv32_1B3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000110110011";
    constant ap_const_lv32_1C0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111000000";
    constant ap_const_lv32_1D2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111010010";
    constant ap_const_lv32_1E0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111100000";
    constant ap_const_lv32_1F1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000111110001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";

    signal ap_rst_n_inv : STD_LOGIC;
    signal iq00_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq00_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq00_ap_vld_preg : STD_LOGIC := '0';
    signal iq00_ap_vld_in_sig : STD_LOGIC;
    signal iq01_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq01_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq01_ap_vld_preg : STD_LOGIC := '0';
    signal iq01_ap_vld_in_sig : STD_LOGIC;
    signal iq02_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq02_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq02_ap_vld_preg : STD_LOGIC := '0';
    signal iq02_ap_vld_in_sig : STD_LOGIC;
    signal iq03_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq03_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq03_ap_vld_preg : STD_LOGIC := '0';
    signal iq03_ap_vld_in_sig : STD_LOGIC;
    signal iq04_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq04_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq04_ap_vld_preg : STD_LOGIC := '0';
    signal iq04_ap_vld_in_sig : STD_LOGIC;
    signal iq05_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq05_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq05_ap_vld_preg : STD_LOGIC := '0';
    signal iq05_ap_vld_in_sig : STD_LOGIC;
    signal iq06_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq06_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq06_ap_vld_preg : STD_LOGIC := '0';
    signal iq06_ap_vld_in_sig : STD_LOGIC;
    signal iq07_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq07_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq07_ap_vld_preg : STD_LOGIC := '0';
    signal iq07_ap_vld_in_sig : STD_LOGIC;
    signal iq08_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq08_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq08_ap_vld_preg : STD_LOGIC := '0';
    signal iq08_ap_vld_in_sig : STD_LOGIC;
    signal iq09_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq09_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq09_ap_vld_preg : STD_LOGIC := '0';
    signal iq09_ap_vld_in_sig : STD_LOGIC;
    signal iq10_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq10_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq10_ap_vld_preg : STD_LOGIC := '0';
    signal iq10_ap_vld_in_sig : STD_LOGIC;
    signal iq11_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq11_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq11_ap_vld_preg : STD_LOGIC := '0';
    signal iq11_ap_vld_in_sig : STD_LOGIC;
    signal iq12_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq12_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq12_ap_vld_preg : STD_LOGIC := '0';
    signal iq12_ap_vld_in_sig : STD_LOGIC;
    signal iq13_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq13_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq13_ap_vld_preg : STD_LOGIC := '0';
    signal iq13_ap_vld_in_sig : STD_LOGIC;
    signal iq14_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq14_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq14_ap_vld_preg : STD_LOGIC := '0';
    signal iq14_ap_vld_in_sig : STD_LOGIC;
    signal iq15_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal iq15_in_sig : STD_LOGIC_VECTOR (31 downto 0);
    signal iq15_ap_vld_preg : STD_LOGIC := '0';
    signal iq15_ap_vld_in_sig : STD_LOGIC;
    signal scale_preg : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal scale_in_sig : STD_LOGIC_VECTOR (11 downto 0);
    signal scale_ap_vld_preg : STD_LOGIC := '0';
    signal scale_ap_vld_in_sig : STD_LOGIC;
    signal group_r : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal iq00_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal iq01_blk_n : STD_LOGIC;
    signal iq02_blk_n : STD_LOGIC;
    signal iq03_blk_n : STD_LOGIC;
    signal iq04_blk_n : STD_LOGIC;
    signal iq05_blk_n : STD_LOGIC;
    signal iq06_blk_n : STD_LOGIC;
    signal iq07_blk_n : STD_LOGIC;
    signal iq08_blk_n : STD_LOGIC;
    signal iq09_blk_n : STD_LOGIC;
    signal iq10_blk_n : STD_LOGIC;
    signal iq11_blk_n : STD_LOGIC;
    signal iq12_blk_n : STD_LOGIC;
    signal iq13_blk_n : STD_LOGIC;
    signal iq14_blk_n : STD_LOGIC;
    signal iq15_blk_n : STD_LOGIC;
    signal scale_blk_n : STD_LOGIC;
    signal output_r_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal regslice_forward_output_V_data_V_U_apdone_blk : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal add_ln870_fu_568_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal zext_ln254_fu_304_p1 : STD_LOGIC_VECTOR (32 downto 0);
    signal p_Result_s_fu_308_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal p_Result_1_fu_320_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln254_fu_332_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal p_Result_2_fu_336_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln254_1_fu_348_p1 : STD_LOGIC_VECTOR (29 downto 0);
    signal p_Result_3_fu_352_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln254_2_fu_364_p1 : STD_LOGIC_VECTOR (28 downto 0);
    signal p_Result_4_fu_368_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln254_3_fu_380_p1 : STD_LOGIC_VECTOR (27 downto 0);
    signal p_Result_5_fu_384_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln254_4_fu_396_p1 : STD_LOGIC_VECTOR (26 downto 0);
    signal p_Result_6_fu_400_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln254_5_fu_412_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal p_Result_7_fu_416_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln254_6_fu_428_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal p_Result_8_fu_432_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln254_7_fu_444_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal p_Result_9_fu_448_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln254_8_fu_460_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal p_Result_10_fu_464_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln254_9_fu_476_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal p_Result_11_fu_480_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln254_10_fu_492_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal p_Result_12_fu_496_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln254_11_fu_508_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal p_Result_13_fu_512_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln254_12_fu_524_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Result_14_fu_528_p5 : STD_LOGIC_VECTOR (511 downto 0);
    signal trunc_ln254_13_fu_540_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal output_r_TDATA_int_regslice : STD_LOGIC_VECTOR (511 downto 0);
    signal output_r_TVALID_int_regslice : STD_LOGIC;
    signal output_r_TREADY_int_regslice : STD_LOGIC;
    signal regslice_forward_output_V_data_V_U_vld_out : STD_LOGIC;
    signal regslice_forward_output_V_keep_V_U_apdone_blk : STD_LOGIC;
    signal regslice_forward_output_V_keep_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_forward_output_V_keep_V_U_vld_out : STD_LOGIC;
    signal regslice_forward_output_V_strb_V_U_apdone_blk : STD_LOGIC;
    signal regslice_forward_output_V_strb_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_forward_output_V_strb_V_U_vld_out : STD_LOGIC;
    signal regslice_forward_output_V_user_V_U_apdone_blk : STD_LOGIC;
    signal output_r_TUSER_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal regslice_forward_output_V_user_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_forward_output_V_user_V_U_vld_out : STD_LOGIC;
    signal regslice_forward_output_V_last_V_U_apdone_blk : STD_LOGIC;
    signal output_r_TLAST_int_regslice : STD_LOGIC_VECTOR (0 downto 0);
    signal regslice_forward_output_V_last_V_U_ack_in_dummy : STD_LOGIC;
    signal regslice_forward_output_V_last_V_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component pkg_fft_output_regslice_forward IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    regslice_forward_output_V_data_V_U : component pkg_fft_output_regslice_forward
    generic map (
        DataWidth => 512)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TDATA_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => output_r_TREADY_int_regslice,
        data_out => output_r_TDATA,
        vld_out => regslice_forward_output_V_data_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_forward_output_V_data_V_U_apdone_blk);

    regslice_forward_output_V_keep_V_U : component pkg_fft_output_regslice_forward
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv64_0,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_forward_output_V_keep_V_U_ack_in_dummy,
        data_out => output_r_TKEEP,
        vld_out => regslice_forward_output_V_keep_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_forward_output_V_keep_V_U_apdone_blk);

    regslice_forward_output_V_strb_V_U : component pkg_fft_output_regslice_forward
    generic map (
        DataWidth => 64)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => ap_const_lv64_0,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_forward_output_V_strb_V_U_ack_in_dummy,
        data_out => output_r_TSTRB,
        vld_out => regslice_forward_output_V_strb_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_forward_output_V_strb_V_U_apdone_blk);

    regslice_forward_output_V_user_V_U : component pkg_fft_output_regslice_forward
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TUSER_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_forward_output_V_user_V_U_ack_in_dummy,
        data_out => output_r_TUSER,
        vld_out => regslice_forward_output_V_user_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_forward_output_V_user_V_U_apdone_blk);

    regslice_forward_output_V_last_V_U : component pkg_fft_output_regslice_forward
    generic map (
        DataWidth => 1)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => output_r_TLAST_int_regslice,
        vld_in => output_r_TVALID_int_regslice,
        ack_in => regslice_forward_output_V_last_V_U_ack_in_dummy,
        data_out => output_r_TLAST,
        vld_out => regslice_forward_output_V_last_V_U_vld_out,
        ack_out => output_r_TREADY,
        apdone_blk => regslice_forward_output_V_last_V_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    iq00_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq00_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    iq00_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq00_ap_vld = ap_const_logic_1)) then 
                    iq00_ap_vld_preg <= iq00_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq00_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq00_preg <= ap_const_lv32_0;
            else
                if ((iq00_ap_vld = ap_const_logic_1)) then 
                    iq00_preg <= iq00;
                end if; 
            end if;
        end if;
    end process;


    iq01_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq01_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    iq01_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq01_ap_vld = ap_const_logic_1)) then 
                    iq01_ap_vld_preg <= iq01_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq01_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq01_preg <= ap_const_lv32_0;
            else
                if ((iq01_ap_vld = ap_const_logic_1)) then 
                    iq01_preg <= iq01;
                end if; 
            end if;
        end if;
    end process;


    iq02_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq02_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    iq02_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq02_ap_vld = ap_const_logic_1)) then 
                    iq02_ap_vld_preg <= iq02_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq02_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq02_preg <= ap_const_lv32_0;
            else
                if ((iq02_ap_vld = ap_const_logic_1)) then 
                    iq02_preg <= iq02;
                end if; 
            end if;
        end if;
    end process;


    iq03_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq03_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    iq03_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq03_ap_vld = ap_const_logic_1)) then 
                    iq03_ap_vld_preg <= iq03_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq03_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq03_preg <= ap_const_lv32_0;
            else
                if ((iq03_ap_vld = ap_const_logic_1)) then 
                    iq03_preg <= iq03;
                end if; 
            end if;
        end if;
    end process;


    iq04_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq04_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    iq04_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq04_ap_vld = ap_const_logic_1)) then 
                    iq04_ap_vld_preg <= iq04_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq04_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq04_preg <= ap_const_lv32_0;
            else
                if ((iq04_ap_vld = ap_const_logic_1)) then 
                    iq04_preg <= iq04;
                end if; 
            end if;
        end if;
    end process;


    iq05_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq05_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    iq05_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq05_ap_vld = ap_const_logic_1)) then 
                    iq05_ap_vld_preg <= iq05_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq05_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq05_preg <= ap_const_lv32_0;
            else
                if ((iq05_ap_vld = ap_const_logic_1)) then 
                    iq05_preg <= iq05;
                end if; 
            end if;
        end if;
    end process;


    iq06_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq06_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    iq06_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq06_ap_vld = ap_const_logic_1)) then 
                    iq06_ap_vld_preg <= iq06_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq06_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq06_preg <= ap_const_lv32_0;
            else
                if ((iq06_ap_vld = ap_const_logic_1)) then 
                    iq06_preg <= iq06;
                end if; 
            end if;
        end if;
    end process;


    iq07_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq07_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    iq07_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq07_ap_vld = ap_const_logic_1)) then 
                    iq07_ap_vld_preg <= iq07_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq07_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq07_preg <= ap_const_lv32_0;
            else
                if ((iq07_ap_vld = ap_const_logic_1)) then 
                    iq07_preg <= iq07;
                end if; 
            end if;
        end if;
    end process;


    iq08_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq08_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    iq08_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq08_ap_vld = ap_const_logic_1)) then 
                    iq08_ap_vld_preg <= iq08_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq08_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq08_preg <= ap_const_lv32_0;
            else
                if ((iq08_ap_vld = ap_const_logic_1)) then 
                    iq08_preg <= iq08;
                end if; 
            end if;
        end if;
    end process;


    iq09_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq09_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    iq09_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq09_ap_vld = ap_const_logic_1)) then 
                    iq09_ap_vld_preg <= iq09_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq09_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq09_preg <= ap_const_lv32_0;
            else
                if ((iq09_ap_vld = ap_const_logic_1)) then 
                    iq09_preg <= iq09;
                end if; 
            end if;
        end if;
    end process;


    iq10_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq10_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    iq10_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq10_ap_vld = ap_const_logic_1)) then 
                    iq10_ap_vld_preg <= iq10_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq10_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq10_preg <= ap_const_lv32_0;
            else
                if ((iq10_ap_vld = ap_const_logic_1)) then 
                    iq10_preg <= iq10;
                end if; 
            end if;
        end if;
    end process;


    iq11_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq11_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    iq11_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq11_ap_vld = ap_const_logic_1)) then 
                    iq11_ap_vld_preg <= iq11_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq11_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq11_preg <= ap_const_lv32_0;
            else
                if ((iq11_ap_vld = ap_const_logic_1)) then 
                    iq11_preg <= iq11;
                end if; 
            end if;
        end if;
    end process;


    iq12_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq12_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    iq12_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq12_ap_vld = ap_const_logic_1)) then 
                    iq12_ap_vld_preg <= iq12_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq12_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq12_preg <= ap_const_lv32_0;
            else
                if ((iq12_ap_vld = ap_const_logic_1)) then 
                    iq12_preg <= iq12;
                end if; 
            end if;
        end if;
    end process;


    iq13_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq13_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    iq13_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq13_ap_vld = ap_const_logic_1)) then 
                    iq13_ap_vld_preg <= iq13_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq13_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq13_preg <= ap_const_lv32_0;
            else
                if ((iq13_ap_vld = ap_const_logic_1)) then 
                    iq13_preg <= iq13;
                end if; 
            end if;
        end if;
    end process;


    iq14_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq14_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    iq14_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq14_ap_vld = ap_const_logic_1)) then 
                    iq14_ap_vld_preg <= iq14_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq14_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq14_preg <= ap_const_lv32_0;
            else
                if ((iq14_ap_vld = ap_const_logic_1)) then 
                    iq14_preg <= iq14;
                end if; 
            end if;
        end if;
    end process;


    iq15_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq15_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    iq15_ap_vld_preg <= ap_const_logic_0;
                elsif ((iq15_ap_vld = ap_const_logic_1)) then 
                    iq15_ap_vld_preg <= iq15_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    iq15_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                iq15_preg <= ap_const_lv32_0;
            else
                if ((iq15_ap_vld = ap_const_logic_1)) then 
                    iq15_preg <= iq15;
                end if; 
            end if;
        end if;
    end process;


    scale_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                scale_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then 
                    scale_ap_vld_preg <= ap_const_logic_0;
                elsif ((scale_ap_vld = ap_const_logic_1)) then 
                    scale_ap_vld_preg <= scale_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    scale_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                scale_preg <= ap_const_lv12_0;
            else
                if ((scale_ap_vld = ap_const_logic_1)) then 
                    scale_preg <= scale;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then
                group_r <= add_ln870_fu_568_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln870_fu_568_p2 <= std_logic_vector(unsigned(group_r) + unsigned(ap_const_lv8_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(iq00_ap_vld_in_sig, iq01_ap_vld_in_sig, iq02_ap_vld_in_sig, iq03_ap_vld_in_sig, iq04_ap_vld_in_sig, iq05_ap_vld_in_sig, iq06_ap_vld_in_sig, iq07_ap_vld_in_sig, iq08_ap_vld_in_sig, iq09_ap_vld_in_sig, iq10_ap_vld_in_sig, iq11_ap_vld_in_sig, iq12_ap_vld_in_sig, iq13_ap_vld_in_sig, iq14_ap_vld_in_sig, iq15_ap_vld_in_sig, scale_ap_vld_in_sig, ap_enable_reg_pp0_iter1, regslice_forward_output_V_data_V_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_01001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_forward_output_V_data_V_U_apdone_blk = ap_const_logic_1))) or ((ap_const_logic_1 = ap_const_logic_1) and ((iq11_ap_vld_in_sig = ap_const_logic_0) or (iq10_ap_vld_in_sig = ap_const_logic_0) or (iq09_ap_vld_in_sig = ap_const_logic_0) or (iq08_ap_vld_in_sig = ap_const_logic_0) or (iq07_ap_vld_in_sig = ap_const_logic_0) or (iq06_ap_vld_in_sig = ap_const_logic_0) or (iq05_ap_vld_in_sig = ap_const_logic_0) or (iq04_ap_vld_in_sig = ap_const_logic_0) or (output_r_TREADY_int_regslice = ap_const_logic_0) or (iq03_ap_vld_in_sig = ap_const_logic_0) or (iq02_ap_vld_in_sig = ap_const_logic_0) or (iq01_ap_vld_in_sig = ap_const_logic_0) or (iq00_ap_vld_in_sig = ap_const_logic_0) or (scale_ap_vld_in_sig = ap_const_logic_0) or (iq15_ap_vld_in_sig = ap_const_logic_0) or (iq14_ap_vld_in_sig = ap_const_logic_0) or (iq13_ap_vld_in_sig = ap_const_logic_0) or (iq12_ap_vld_in_sig = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(iq00_ap_vld_in_sig, iq01_ap_vld_in_sig, iq02_ap_vld_in_sig, iq03_ap_vld_in_sig, iq04_ap_vld_in_sig, iq05_ap_vld_in_sig, iq06_ap_vld_in_sig, iq07_ap_vld_in_sig, iq08_ap_vld_in_sig, iq09_ap_vld_in_sig, iq10_ap_vld_in_sig, iq11_ap_vld_in_sig, iq12_ap_vld_in_sig, iq13_ap_vld_in_sig, iq14_ap_vld_in_sig, iq15_ap_vld_in_sig, scale_ap_vld_in_sig, ap_enable_reg_pp0_iter1, regslice_forward_output_V_data_V_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_forward_output_V_data_V_U_apdone_blk = ap_const_logic_1))) or ((ap_const_logic_1 = ap_const_logic_1) and ((iq11_ap_vld_in_sig = ap_const_logic_0) or (iq10_ap_vld_in_sig = ap_const_logic_0) or (iq09_ap_vld_in_sig = ap_const_logic_0) or (iq08_ap_vld_in_sig = ap_const_logic_0) or (iq07_ap_vld_in_sig = ap_const_logic_0) or (iq06_ap_vld_in_sig = ap_const_logic_0) or (iq05_ap_vld_in_sig = ap_const_logic_0) or (iq04_ap_vld_in_sig = ap_const_logic_0) or (output_r_TREADY_int_regslice = ap_const_logic_0) or (iq03_ap_vld_in_sig = ap_const_logic_0) or (iq02_ap_vld_in_sig = ap_const_logic_0) or (iq01_ap_vld_in_sig = ap_const_logic_0) or (iq00_ap_vld_in_sig = ap_const_logic_0) or (scale_ap_vld_in_sig = ap_const_logic_0) or (iq15_ap_vld_in_sig = ap_const_logic_0) or (iq14_ap_vld_in_sig = ap_const_logic_0) or (iq13_ap_vld_in_sig = ap_const_logic_0) or (iq12_ap_vld_in_sig = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(iq00_ap_vld_in_sig, iq01_ap_vld_in_sig, iq02_ap_vld_in_sig, iq03_ap_vld_in_sig, iq04_ap_vld_in_sig, iq05_ap_vld_in_sig, iq06_ap_vld_in_sig, iq07_ap_vld_in_sig, iq08_ap_vld_in_sig, iq09_ap_vld_in_sig, iq10_ap_vld_in_sig, iq11_ap_vld_in_sig, iq12_ap_vld_in_sig, iq13_ap_vld_in_sig, iq14_ap_vld_in_sig, iq15_ap_vld_in_sig, scale_ap_vld_in_sig, ap_enable_reg_pp0_iter1, regslice_forward_output_V_data_V_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_forward_output_V_data_V_U_apdone_blk = ap_const_logic_1))) or ((ap_const_logic_1 = ap_const_logic_1) and ((iq11_ap_vld_in_sig = ap_const_logic_0) or (iq10_ap_vld_in_sig = ap_const_logic_0) or (iq09_ap_vld_in_sig = ap_const_logic_0) or (iq08_ap_vld_in_sig = ap_const_logic_0) or (iq07_ap_vld_in_sig = ap_const_logic_0) or (iq06_ap_vld_in_sig = ap_const_logic_0) or (iq05_ap_vld_in_sig = ap_const_logic_0) or (iq04_ap_vld_in_sig = ap_const_logic_0) or (output_r_TREADY_int_regslice = ap_const_logic_0) or (iq03_ap_vld_in_sig = ap_const_logic_0) or (iq02_ap_vld_in_sig = ap_const_logic_0) or (iq01_ap_vld_in_sig = ap_const_logic_0) or (iq00_ap_vld_in_sig = ap_const_logic_0) or (scale_ap_vld_in_sig = ap_const_logic_0) or (iq15_ap_vld_in_sig = ap_const_logic_0) or (iq14_ap_vld_in_sig = ap_const_logic_0) or (iq13_ap_vld_in_sig = ap_const_logic_0) or (iq12_ap_vld_in_sig = ap_const_logic_0))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(iq00_ap_vld_in_sig, iq01_ap_vld_in_sig, iq02_ap_vld_in_sig, iq03_ap_vld_in_sig, iq04_ap_vld_in_sig, iq05_ap_vld_in_sig, iq06_ap_vld_in_sig, iq07_ap_vld_in_sig, iq08_ap_vld_in_sig, iq09_ap_vld_in_sig, iq10_ap_vld_in_sig, iq11_ap_vld_in_sig, iq12_ap_vld_in_sig, iq13_ap_vld_in_sig, iq14_ap_vld_in_sig, iq15_ap_vld_in_sig, scale_ap_vld_in_sig, output_r_TREADY_int_regslice)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((iq11_ap_vld_in_sig = ap_const_logic_0) or (iq10_ap_vld_in_sig = ap_const_logic_0) or (iq09_ap_vld_in_sig = ap_const_logic_0) or (iq08_ap_vld_in_sig = ap_const_logic_0) or (iq07_ap_vld_in_sig = ap_const_logic_0) or (iq06_ap_vld_in_sig = ap_const_logic_0) or (iq05_ap_vld_in_sig = ap_const_logic_0) or (iq04_ap_vld_in_sig = ap_const_logic_0) or (output_r_TREADY_int_regslice = ap_const_logic_0) or (iq03_ap_vld_in_sig = ap_const_logic_0) or (iq02_ap_vld_in_sig = ap_const_logic_0) or (iq01_ap_vld_in_sig = ap_const_logic_0) or (iq00_ap_vld_in_sig = ap_const_logic_0) or (scale_ap_vld_in_sig = ap_const_logic_0) or (iq15_ap_vld_in_sig = ap_const_logic_0) or (iq14_ap_vld_in_sig = ap_const_logic_0) or (iq13_ap_vld_in_sig = ap_const_logic_0) or (iq12_ap_vld_in_sig = ap_const_logic_0));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(regslice_forward_output_V_data_V_U_apdone_blk, output_r_TREADY_int_regslice)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((output_r_TREADY_int_regslice = ap_const_logic_0) or (regslice_forward_output_V_data_V_U_apdone_blk = ap_const_logic_1));
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_logic_1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_reset_idle_pp0 <= ap_const_logic_0;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    iq00_ap_vld_in_sig_assign_proc : process(iq00_ap_vld, iq00_ap_vld_preg)
    begin
        if ((iq00_ap_vld = ap_const_logic_1)) then 
            iq00_ap_vld_in_sig <= iq00_ap_vld;
        else 
            iq00_ap_vld_in_sig <= iq00_ap_vld_preg;
        end if; 
    end process;


    iq00_blk_n_assign_proc : process(iq00_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            iq00_blk_n <= iq00_ap_vld;
        else 
            iq00_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq00_in_sig_assign_proc : process(iq00, iq00_preg, iq00_ap_vld)
    begin
        if ((iq00_ap_vld = ap_const_logic_1)) then 
            iq00_in_sig <= iq00;
        else 
            iq00_in_sig <= iq00_preg;
        end if; 
    end process;


    iq01_ap_vld_in_sig_assign_proc : process(iq01_ap_vld, iq01_ap_vld_preg)
    begin
        if ((iq01_ap_vld = ap_const_logic_1)) then 
            iq01_ap_vld_in_sig <= iq01_ap_vld;
        else 
            iq01_ap_vld_in_sig <= iq01_ap_vld_preg;
        end if; 
    end process;


    iq01_blk_n_assign_proc : process(iq01_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            iq01_blk_n <= iq01_ap_vld;
        else 
            iq01_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq01_in_sig_assign_proc : process(iq01, iq01_preg, iq01_ap_vld)
    begin
        if ((iq01_ap_vld = ap_const_logic_1)) then 
            iq01_in_sig <= iq01;
        else 
            iq01_in_sig <= iq01_preg;
        end if; 
    end process;


    iq02_ap_vld_in_sig_assign_proc : process(iq02_ap_vld, iq02_ap_vld_preg)
    begin
        if ((iq02_ap_vld = ap_const_logic_1)) then 
            iq02_ap_vld_in_sig <= iq02_ap_vld;
        else 
            iq02_ap_vld_in_sig <= iq02_ap_vld_preg;
        end if; 
    end process;


    iq02_blk_n_assign_proc : process(iq02_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            iq02_blk_n <= iq02_ap_vld;
        else 
            iq02_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq02_in_sig_assign_proc : process(iq02, iq02_preg, iq02_ap_vld)
    begin
        if ((iq02_ap_vld = ap_const_logic_1)) then 
            iq02_in_sig <= iq02;
        else 
            iq02_in_sig <= iq02_preg;
        end if; 
    end process;


    iq03_ap_vld_in_sig_assign_proc : process(iq03_ap_vld, iq03_ap_vld_preg)
    begin
        if ((iq03_ap_vld = ap_const_logic_1)) then 
            iq03_ap_vld_in_sig <= iq03_ap_vld;
        else 
            iq03_ap_vld_in_sig <= iq03_ap_vld_preg;
        end if; 
    end process;


    iq03_blk_n_assign_proc : process(iq03_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            iq03_blk_n <= iq03_ap_vld;
        else 
            iq03_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq03_in_sig_assign_proc : process(iq03, iq03_preg, iq03_ap_vld)
    begin
        if ((iq03_ap_vld = ap_const_logic_1)) then 
            iq03_in_sig <= iq03;
        else 
            iq03_in_sig <= iq03_preg;
        end if; 
    end process;


    iq04_ap_vld_in_sig_assign_proc : process(iq04_ap_vld, iq04_ap_vld_preg)
    begin
        if ((iq04_ap_vld = ap_const_logic_1)) then 
            iq04_ap_vld_in_sig <= iq04_ap_vld;
        else 
            iq04_ap_vld_in_sig <= iq04_ap_vld_preg;
        end if; 
    end process;


    iq04_blk_n_assign_proc : process(iq04_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            iq04_blk_n <= iq04_ap_vld;
        else 
            iq04_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq04_in_sig_assign_proc : process(iq04, iq04_preg, iq04_ap_vld)
    begin
        if ((iq04_ap_vld = ap_const_logic_1)) then 
            iq04_in_sig <= iq04;
        else 
            iq04_in_sig <= iq04_preg;
        end if; 
    end process;


    iq05_ap_vld_in_sig_assign_proc : process(iq05_ap_vld, iq05_ap_vld_preg)
    begin
        if ((iq05_ap_vld = ap_const_logic_1)) then 
            iq05_ap_vld_in_sig <= iq05_ap_vld;
        else 
            iq05_ap_vld_in_sig <= iq05_ap_vld_preg;
        end if; 
    end process;


    iq05_blk_n_assign_proc : process(iq05_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            iq05_blk_n <= iq05_ap_vld;
        else 
            iq05_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq05_in_sig_assign_proc : process(iq05, iq05_preg, iq05_ap_vld)
    begin
        if ((iq05_ap_vld = ap_const_logic_1)) then 
            iq05_in_sig <= iq05;
        else 
            iq05_in_sig <= iq05_preg;
        end if; 
    end process;


    iq06_ap_vld_in_sig_assign_proc : process(iq06_ap_vld, iq06_ap_vld_preg)
    begin
        if ((iq06_ap_vld = ap_const_logic_1)) then 
            iq06_ap_vld_in_sig <= iq06_ap_vld;
        else 
            iq06_ap_vld_in_sig <= iq06_ap_vld_preg;
        end if; 
    end process;


    iq06_blk_n_assign_proc : process(iq06_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            iq06_blk_n <= iq06_ap_vld;
        else 
            iq06_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq06_in_sig_assign_proc : process(iq06, iq06_preg, iq06_ap_vld)
    begin
        if ((iq06_ap_vld = ap_const_logic_1)) then 
            iq06_in_sig <= iq06;
        else 
            iq06_in_sig <= iq06_preg;
        end if; 
    end process;


    iq07_ap_vld_in_sig_assign_proc : process(iq07_ap_vld, iq07_ap_vld_preg)
    begin
        if ((iq07_ap_vld = ap_const_logic_1)) then 
            iq07_ap_vld_in_sig <= iq07_ap_vld;
        else 
            iq07_ap_vld_in_sig <= iq07_ap_vld_preg;
        end if; 
    end process;


    iq07_blk_n_assign_proc : process(iq07_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            iq07_blk_n <= iq07_ap_vld;
        else 
            iq07_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq07_in_sig_assign_proc : process(iq07, iq07_preg, iq07_ap_vld)
    begin
        if ((iq07_ap_vld = ap_const_logic_1)) then 
            iq07_in_sig <= iq07;
        else 
            iq07_in_sig <= iq07_preg;
        end if; 
    end process;


    iq08_ap_vld_in_sig_assign_proc : process(iq08_ap_vld, iq08_ap_vld_preg)
    begin
        if ((iq08_ap_vld = ap_const_logic_1)) then 
            iq08_ap_vld_in_sig <= iq08_ap_vld;
        else 
            iq08_ap_vld_in_sig <= iq08_ap_vld_preg;
        end if; 
    end process;


    iq08_blk_n_assign_proc : process(iq08_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            iq08_blk_n <= iq08_ap_vld;
        else 
            iq08_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq08_in_sig_assign_proc : process(iq08, iq08_preg, iq08_ap_vld)
    begin
        if ((iq08_ap_vld = ap_const_logic_1)) then 
            iq08_in_sig <= iq08;
        else 
            iq08_in_sig <= iq08_preg;
        end if; 
    end process;


    iq09_ap_vld_in_sig_assign_proc : process(iq09_ap_vld, iq09_ap_vld_preg)
    begin
        if ((iq09_ap_vld = ap_const_logic_1)) then 
            iq09_ap_vld_in_sig <= iq09_ap_vld;
        else 
            iq09_ap_vld_in_sig <= iq09_ap_vld_preg;
        end if; 
    end process;


    iq09_blk_n_assign_proc : process(iq09_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            iq09_blk_n <= iq09_ap_vld;
        else 
            iq09_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq09_in_sig_assign_proc : process(iq09, iq09_preg, iq09_ap_vld)
    begin
        if ((iq09_ap_vld = ap_const_logic_1)) then 
            iq09_in_sig <= iq09;
        else 
            iq09_in_sig <= iq09_preg;
        end if; 
    end process;


    iq10_ap_vld_in_sig_assign_proc : process(iq10_ap_vld, iq10_ap_vld_preg)
    begin
        if ((iq10_ap_vld = ap_const_logic_1)) then 
            iq10_ap_vld_in_sig <= iq10_ap_vld;
        else 
            iq10_ap_vld_in_sig <= iq10_ap_vld_preg;
        end if; 
    end process;


    iq10_blk_n_assign_proc : process(iq10_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            iq10_blk_n <= iq10_ap_vld;
        else 
            iq10_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq10_in_sig_assign_proc : process(iq10, iq10_preg, iq10_ap_vld)
    begin
        if ((iq10_ap_vld = ap_const_logic_1)) then 
            iq10_in_sig <= iq10;
        else 
            iq10_in_sig <= iq10_preg;
        end if; 
    end process;


    iq11_ap_vld_in_sig_assign_proc : process(iq11_ap_vld, iq11_ap_vld_preg)
    begin
        if ((iq11_ap_vld = ap_const_logic_1)) then 
            iq11_ap_vld_in_sig <= iq11_ap_vld;
        else 
            iq11_ap_vld_in_sig <= iq11_ap_vld_preg;
        end if; 
    end process;


    iq11_blk_n_assign_proc : process(iq11_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            iq11_blk_n <= iq11_ap_vld;
        else 
            iq11_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq11_in_sig_assign_proc : process(iq11, iq11_preg, iq11_ap_vld)
    begin
        if ((iq11_ap_vld = ap_const_logic_1)) then 
            iq11_in_sig <= iq11;
        else 
            iq11_in_sig <= iq11_preg;
        end if; 
    end process;


    iq12_ap_vld_in_sig_assign_proc : process(iq12_ap_vld, iq12_ap_vld_preg)
    begin
        if ((iq12_ap_vld = ap_const_logic_1)) then 
            iq12_ap_vld_in_sig <= iq12_ap_vld;
        else 
            iq12_ap_vld_in_sig <= iq12_ap_vld_preg;
        end if; 
    end process;


    iq12_blk_n_assign_proc : process(iq12_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            iq12_blk_n <= iq12_ap_vld;
        else 
            iq12_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq12_in_sig_assign_proc : process(iq12, iq12_preg, iq12_ap_vld)
    begin
        if ((iq12_ap_vld = ap_const_logic_1)) then 
            iq12_in_sig <= iq12;
        else 
            iq12_in_sig <= iq12_preg;
        end if; 
    end process;


    iq13_ap_vld_in_sig_assign_proc : process(iq13_ap_vld, iq13_ap_vld_preg)
    begin
        if ((iq13_ap_vld = ap_const_logic_1)) then 
            iq13_ap_vld_in_sig <= iq13_ap_vld;
        else 
            iq13_ap_vld_in_sig <= iq13_ap_vld_preg;
        end if; 
    end process;


    iq13_blk_n_assign_proc : process(iq13_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            iq13_blk_n <= iq13_ap_vld;
        else 
            iq13_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq13_in_sig_assign_proc : process(iq13, iq13_preg, iq13_ap_vld)
    begin
        if ((iq13_ap_vld = ap_const_logic_1)) then 
            iq13_in_sig <= iq13;
        else 
            iq13_in_sig <= iq13_preg;
        end if; 
    end process;


    iq14_ap_vld_in_sig_assign_proc : process(iq14_ap_vld, iq14_ap_vld_preg)
    begin
        if ((iq14_ap_vld = ap_const_logic_1)) then 
            iq14_ap_vld_in_sig <= iq14_ap_vld;
        else 
            iq14_ap_vld_in_sig <= iq14_ap_vld_preg;
        end if; 
    end process;


    iq14_blk_n_assign_proc : process(iq14_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            iq14_blk_n <= iq14_ap_vld;
        else 
            iq14_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq14_in_sig_assign_proc : process(iq14, iq14_preg, iq14_ap_vld)
    begin
        if ((iq14_ap_vld = ap_const_logic_1)) then 
            iq14_in_sig <= iq14;
        else 
            iq14_in_sig <= iq14_preg;
        end if; 
    end process;


    iq15_ap_vld_in_sig_assign_proc : process(iq15_ap_vld, iq15_ap_vld_preg)
    begin
        if ((iq15_ap_vld = ap_const_logic_1)) then 
            iq15_ap_vld_in_sig <= iq15_ap_vld;
        else 
            iq15_ap_vld_in_sig <= iq15_ap_vld_preg;
        end if; 
    end process;


    iq15_blk_n_assign_proc : process(iq15_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            iq15_blk_n <= iq15_ap_vld;
        else 
            iq15_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    iq15_in_sig_assign_proc : process(iq15, iq15_preg, iq15_ap_vld)
    begin
        if ((iq15_ap_vld = ap_const_logic_1)) then 
            iq15_in_sig <= iq15;
        else 
            iq15_in_sig <= iq15_preg;
        end if; 
    end process;


    output_r_TDATA_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter1, output_r_TREADY_int_regslice)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1)))) then 
            output_r_TDATA_blk_n <= output_r_TREADY_int_regslice;
        else 
            output_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    output_r_TDATA_int_regslice <= (p_Result_14_fu_528_p5(511 downto 498) & trunc_ln254_13_fu_540_p1 & p_Result_14_fu_528_p5(479 downto 0));
    output_r_TLAST_int_regslice <= "1" when (group_r = ap_const_lv8_FF) else "0";
    output_r_TUSER_int_regslice <= std_logic_vector(IEEE.numeric_std.resize(unsigned(scale_in_sig),16));
    output_r_TVALID <= regslice_forward_output_V_data_V_U_vld_out;

    output_r_TVALID_int_regslice_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_const_logic_1))) then 
            output_r_TVALID_int_regslice <= ap_const_logic_1;
        else 
            output_r_TVALID_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_10_fu_464_p5 <= (p_Result_9_fu_448_p5(511 downto 343) & trunc_ln254_8_fu_460_p1 & p_Result_9_fu_448_p5(319 downto 0));
    p_Result_11_fu_480_p5 <= (p_Result_10_fu_464_p5(511 downto 374) & trunc_ln254_9_fu_476_p1 & p_Result_10_fu_464_p5(351 downto 0));
    p_Result_12_fu_496_p5 <= (p_Result_11_fu_480_p5(511 downto 405) & trunc_ln254_10_fu_492_p1 & p_Result_11_fu_480_p5(383 downto 0));
    p_Result_13_fu_512_p5 <= (p_Result_12_fu_496_p5(511 downto 436) & trunc_ln254_11_fu_508_p1 & p_Result_12_fu_496_p5(415 downto 0));
    p_Result_14_fu_528_p5 <= (p_Result_13_fu_512_p5(511 downto 467) & trunc_ln254_12_fu_524_p1 & p_Result_13_fu_512_p5(447 downto 0));
    p_Result_1_fu_320_p5 <= (p_Result_s_fu_308_p5(511 downto 64) & iq01_in_sig & p_Result_s_fu_308_p5(31 downto 0));
    p_Result_2_fu_336_p5 <= (p_Result_1_fu_320_p5(511 downto 95) & trunc_ln254_fu_332_p1 & p_Result_1_fu_320_p5(63 downto 0));
    p_Result_3_fu_352_p5 <= (p_Result_2_fu_336_p5(511 downto 126) & trunc_ln254_1_fu_348_p1 & p_Result_2_fu_336_p5(95 downto 0));
    p_Result_4_fu_368_p5 <= (p_Result_3_fu_352_p5(511 downto 157) & trunc_ln254_2_fu_364_p1 & p_Result_3_fu_352_p5(127 downto 0));
    p_Result_5_fu_384_p5 <= (p_Result_4_fu_368_p5(511 downto 188) & trunc_ln254_3_fu_380_p1 & p_Result_4_fu_368_p5(159 downto 0));
    p_Result_6_fu_400_p5 <= (p_Result_5_fu_384_p5(511 downto 219) & trunc_ln254_4_fu_396_p1 & p_Result_5_fu_384_p5(191 downto 0));
    p_Result_7_fu_416_p5 <= (p_Result_6_fu_400_p5(511 downto 250) & trunc_ln254_5_fu_412_p1 & p_Result_6_fu_400_p5(223 downto 0));
    p_Result_8_fu_432_p5 <= (p_Result_7_fu_416_p5(511 downto 281) & trunc_ln254_6_fu_428_p1 & p_Result_7_fu_416_p5(255 downto 0));
    p_Result_9_fu_448_p5 <= (p_Result_8_fu_432_p5(511 downto 312) & trunc_ln254_7_fu_444_p1 & p_Result_8_fu_432_p5(287 downto 0));
    p_Result_s_fu_308_p5 <= (ap_const_lv512_lc_1(511 downto 33) & zext_ln254_fu_304_p1);

    scale_ap_vld_in_sig_assign_proc : process(scale_ap_vld, scale_ap_vld_preg)
    begin
        if ((scale_ap_vld = ap_const_logic_1)) then 
            scale_ap_vld_in_sig <= scale_ap_vld;
        else 
            scale_ap_vld_in_sig <= scale_ap_vld_preg;
        end if; 
    end process;


    scale_blk_n_assign_proc : process(scale_ap_vld, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_const_logic_1))) then 
            scale_blk_n <= scale_ap_vld;
        else 
            scale_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    scale_in_sig_assign_proc : process(scale, scale_preg, scale_ap_vld)
    begin
        if ((scale_ap_vld = ap_const_logic_1)) then 
            scale_in_sig <= scale;
        else 
            scale_in_sig <= scale_preg;
        end if; 
    end process;

    trunc_ln254_10_fu_492_p1 <= iq12_in_sig(21 - 1 downto 0);
    trunc_ln254_11_fu_508_p1 <= iq13_in_sig(20 - 1 downto 0);
    trunc_ln254_12_fu_524_p1 <= iq14_in_sig(19 - 1 downto 0);
    trunc_ln254_13_fu_540_p1 <= iq15_in_sig(18 - 1 downto 0);
    trunc_ln254_1_fu_348_p1 <= iq03_in_sig(30 - 1 downto 0);
    trunc_ln254_2_fu_364_p1 <= iq04_in_sig(29 - 1 downto 0);
    trunc_ln254_3_fu_380_p1 <= iq05_in_sig(28 - 1 downto 0);
    trunc_ln254_4_fu_396_p1 <= iq06_in_sig(27 - 1 downto 0);
    trunc_ln254_5_fu_412_p1 <= iq07_in_sig(26 - 1 downto 0);
    trunc_ln254_6_fu_428_p1 <= iq08_in_sig(25 - 1 downto 0);
    trunc_ln254_7_fu_444_p1 <= iq09_in_sig(24 - 1 downto 0);
    trunc_ln254_8_fu_460_p1 <= iq10_in_sig(23 - 1 downto 0);
    trunc_ln254_9_fu_476_p1 <= iq11_in_sig(22 - 1 downto 0);
    trunc_ln254_fu_332_p1 <= iq02_in_sig(31 - 1 downto 0);
    zext_ln254_fu_304_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iq00_in_sig),33));
end behav;
